name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
        cache: true

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        mkdir -p release
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch <<< "$platform"
          echo "Building for $os/$arch..."
          
          output_name="ai-agents-cli"
          if [ "$os" = "windows" ]; then
            output_name+=".exe"
          fi
          
          GOOS=$os GOARCH=$arch go build \
            -ldflags "-X main.Version=${{ steps.version.outputs.VERSION }} -X main.BuildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.GitCommit=$(git rev-parse --short HEAD)" \
            -o "release/ai-agents-cli-$os-$arch$([ "$os" = "windows" ] && echo ".exe")" .
        done

    - name: Create checksums
      run: |
        cd release
        for file in *; do
          sha256sum "$file" > "$file.sha256"
        done

    - name: Create archives
      run: |
        cd release
        
        for platform in "linux-amd64" "linux-arm64" "darwin-amd64" "darwin-arm64" "windows-amd64"; do
          if [[ "$platform" == *"windows"* ]]; then
            zip -r "ai-agents-cli-$platform.zip" "ai-agents-cli-$platform.exe" "ai-agents-cli-$platform.exe.sha256"
          else
            tar -czf "ai-agents-cli-$platform.tar.gz" "ai-agents-cli-$platform" "ai-agents-cli-$platform.sha256"
          fi
        done

    - name: Generate release notes
      run: |
        cat > release_notes.md << EOF
        # AI Agents CLI ${{ steps.version.outputs.VERSION }}
        
        ## 🚀 What's New
        
        - Full support for MCP servers management
        - AI agents and agent systems management
        - CI/CD integration with validation and monitoring
        - Beautiful colored interface with emojis
        - Support for YAML and JSON configurations
        - Multi-language support (Russian, English)
        
        ## 📦 Installation
        
        ### Using winget (Windows)
        \`\`\`bash
        winget install CloudRu.AIAgentsCLI
        \`\`\`
        
        ### Using Homebrew (macOS/Linux)
        \`\`\`bash
        brew install cloud-ru/evo-ai-agents-cli/ai-agents-cli
        \`\`\`
        
        ### Manual Installation
        Download the appropriate binary for your platform from the assets below.
        
        ## 🔧 Quick Start
        
        1. Set your IAM credentials: \`export IAM_KEY_ID="your-iam-key-id" IAM_SECRET="your-iam-secret"\`
        2. Set your project ID: \`export PROJECT_ID="your-project-id"\`
        3. Run: \`ai-agents-cli --help\`
        
        ## 📚 Documentation
        
        - [README](https://github.com/cloud-ru/evo-ai-agents-cli/blob/main/README.md)
        - [Examples](https://github.com/cloud-ru/evo-ai-agents-cli/tree/main/examples)
        - [Installation Guide](https://github.com/cloud-ru/evo-ai-agents-cli/blob/main/.github/INSTALL.md)
        
        ## 🐛 Bug Reports
        
        Please report bugs in the [Issues](https://github.com/cloud-ru/evo-ai-agents-cli/issues) section.
        
        ## 📄 License
        
        MIT License - see [LICENSE](https://github.com/cloud-ru/evo-ai-agents-cli/blob/main/LICENSE) for details.
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: AI Agents CLI ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          release/*.tar.gz
          release/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release/
        retention-days: 30