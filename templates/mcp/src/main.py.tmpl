"""
{{.ProjectName}} - {{if eq .ProjectType "mcp"}}MCP Server{{else}}AI Agent{{end}} Main Module

{{if eq .ProjectType "mcp"}}This module implements a Model Context Protocol (MCP) server.{{else}}This module implements an AI agent for task automation.{{end}}
"""

import asyncio
import logging
import sys
from pathlib import Path

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseSettings
from rich.console import Console
from rich.logging import RichHandler

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RichHandler(console=Console(stderr=True), rich_tracebacks=True),
    ],
)

logger = logging.getLogger(__name__)


class Settings(BaseSettings):
    """Application settings."""
    
    app_name: str = "{{.ProjectName}}"
    app_version: str = "1.0.0"
    app_env: str = "development"
    debug: bool = True
    log_level: str = "INFO"
    
    host: str = "0.0.0.0"
    port: int = 8000
    
    # MCP Server settings (for MCP projects)
    {{if eq .ProjectType "mcp"}}mcp_server_name: str = "{{.ProjectName}}"
    mcp_server_description: str = "MCP server for {{.ProjectName}}"
    mcp_server_version: str = "1.0.0"{{else}}# Agent settings (for Agent projects)
    agent_name: str = "{{.ProjectName}}"
    agent_description: str = "AI agent for {{.ProjectName}}"
    agent_version: str = "1.0.0"{{end}}
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"


# Global settings instance
settings = Settings()

# FastAPI app
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="{{if eq .ProjectType "mcp"}}MCP (Model Context Protocol) server for AI agents integration{{else}}AI agent for task automation{{end}}",
    debug=settings.debug,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"] if settings.debug else [],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "message": f"Welcome to {settings.app_name}",
        "version": settings.app_version,
        "status": "running"
    }


@app.get("/health")
async def health():
    """Health check endpoint."""
    return {
        "status": "healthy",
        "service": settings.app_name,
        "version": settings.app_version
    }


{{if eq .ProjectType "mcp"}}@app.get("/mcp/info")
async def mcp_info():
    """MCP server information."""
    return {
        "name": settings.mcp_server_name,
        "description": settings.mcp_server_description,
        "version": settings.mcp_server_version,
        "protocol": "mcp",
        "capabilities": [
            "tools",
            "resources",
            "prompts"
        ]
    }


@app.post("/mcp/tools")
async def mcp_tools():
    """MCP tools endpoint."""
    return {
        "tools": [
            {
                "name": "example_tool",
                "description": "An example MCP tool",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "input": {
                            "type": "string",
                            "description": "Input for the tool"
                        }
                    },
                    "required": ["input"]
                }
            }
        ]
    }


@app.post("/mcp/resources")
async def mcp_resources():
    """MCP resources endpoint."""
    return {
        "resources": [
            {
                "uri": "example://resource",
                "name": "Example Resource",
                "description": "An example MCP resource",
                "mimeType": "text/plain"
            }
        ]
    }


@app.post("/mcp/prompts")
async def mcp_prompts():
    """MCP prompts endpoint."""
    return {
        "prompts": [
            {
                "name": "example_prompt",
                "description": "An example MCP prompt",
                "arguments": [
                    {
                        "name": "topic",
                        "description": "The topic for the prompt",
                        "required": True
                    }
                ]
            }
        ]
    }{{else}}@app.post("/agent/process")
async def agent_process(request: dict):
    """Process a request with the AI agent."""
    # TODO: Implement agent processing logic
    return {
        "status": "processed",
        "input": request,
        "output": "Agent response placeholder"
    }


@app.get("/agent/status")
async def agent_status():
    """Get agent status."""
    return {
        "name": settings.agent_name,
        "description": settings.agent_description,
        "version": settings.agent_version,
        "status": "active",
        "capabilities": [
            "text_processing",
            "task_automation",
            "decision_making"
        ]
    }{{end}}


def main():
    """Main entry point."""
    logger.info(f"Starting {settings.app_name} v{settings.app_version}")
    logger.info(f"Environment: {settings.app_env}")
    logger.info(f"Debug mode: {settings.debug}")
    
    try:
        uvicorn.run(
            "main:app",
            host=settings.host,
            port=settings.port,
            reload=settings.debug,
            log_level=settings.log_level.lower(),
            access_log=True,
        )
    except KeyboardInterrupt:
        logger.info("Shutting down...")
    except Exception as e:
        logger.error(f"Failed to start server: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
