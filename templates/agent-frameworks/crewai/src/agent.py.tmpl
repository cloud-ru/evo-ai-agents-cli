"""
{{.ProjectName}} - AI Agent using CrewAI Framework

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CrewAI.
"""

import asyncio
import logging
from typing import Any, Dict, List, Optional

from crewai import Agent, Task, Crew, Process
from crewai.tools import BaseTool
from langchain_openai import ChatOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class {{.ProjectName | Title}}Agent:
    """
    {{.ProjectName}} AI Agent using CrewAI
    
    –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è {{.Description}}
    """
    
    def __init__(self):
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.7,
            max_tokens=1000
        )
        self.crew = self._create_crew()
    
    def _create_crew(self) -> Crew:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        main_agent = Agent(
            role="–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç",
            goal="{{.Description}}",
            backstory="–¢—ã –æ–ø—ã—Ç–Ω—ã–π AI –∞–≥–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ {{.Description}}",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        main_task = Task(
            description="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç",
            agent=main_agent,
            expected_output="–ü–æ–ª–µ–∑–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        crew = Crew(
            agents=[main_agent],
            tasks=[main_task],
            process=Process.sequential,
            verbose=True
        )
        
        return crew
    
    async def process_message(self, user_input: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_input: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
            context = {
                "user_input": user_input,
                "conversation_history": [],
                "current_context": {}
            }
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π
            result = self.crew.kickoff(inputs=context)
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {result}")
            return str(result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    
    async def get_help(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        return """
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ {{.ProjectName}} –∞–≥–µ–Ω—Ç–∞:

ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM
- –†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∞–≥–µ–Ω—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

üí¨ –ö–æ–º–∞–Ω–¥—ã:
- "–ø—Ä–∏–≤–µ—Ç" - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
- "–ø–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
- –õ—é–±–æ–π –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –§—Ä–µ–π–º–≤–æ—Ä–∫: CrewAI
- LLM: GPT-4
- –ü—Ä–æ—Ü–µ—Å—Å: Sequential
- –ö–æ–º–∞–Ω–¥–∞: 1 –∞–≥–µ–Ω—Ç
"""
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        return {
            "agent_name": "{{.ProjectName}}",
            "framework": "CrewAI",
            "status": "–ê–∫—Ç–∏–≤–µ–Ω",
            "llm_model": "gpt-4",
            "crew_size": 1,
            "process_type": "Sequential",
            "capabilities": [
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤",
                "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"
            ]
        }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    agent = {{.ProjectName | Title}}Agent()
    
    print("ü§ñ {{.ProjectName}} Agent –∑–∞–ø—É—â–µ–Ω!")
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("–í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    print("-" * 50)
    
    while True:
        try:
            user_input = input("\nüë§ –í—ã: ")
            
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif user_input.lower() in ['–ø–æ–º–æ—â—å', 'help']:
                help_text = await agent.get_help()
                print(f"\nü§ñ –ê–≥–µ–Ω—Ç:\n{help_text}")
            else:
                response = await agent.process_message(user_input)
                print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {response}")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
