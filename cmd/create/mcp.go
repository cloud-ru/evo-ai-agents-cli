package create

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/charmbracelet/lipgloss"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/scaffolder"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/ui"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/errors"
	"github.com/spf13/cobra"
)

var (
	mcpProjectPath string
	mcpAuthor      string
)

// createMcpCmd represents the mcp create command
var createMcpCmd = &cobra.Command{
	Use:   "mcp [project-name]",
	Short: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞",
	Long: `–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç MCP (Model Context Protocol) —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.

MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã —Å AI –∞–≥–µ–Ω—Ç–∞–º–∏.
–®–∞–±–ª–æ–Ω –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Python –ø—Ä–æ–µ–∫—Ç–∞ —Å FastAPI, Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π,
CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.

–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
`,
	Args: cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
		errorHandler := errors.NewHandler()

		// Always use full-screen TUI form for better UX
		formData, err := ui.RunProjectForm("mcp")
		if err != nil {
			appErr := errorHandler.WrapUserError(err, "FORM_ERROR", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã")
			fmt.Println(errorHandler.Handle(appErr))
			os.Exit(1)
		}

		projectName := formData.ProjectName
		if projectName == "" {
			appErr := errors.ValidationError("MISSING_PROJECT_NAME", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
			fmt.Println(errorHandler.Handle(appErr))
			os.Exit(1)
		}

		targetPath := formData.ProjectPath
		if targetPath == "" {
			targetPath = projectName
		} else {
			targetPath = filepath.Join(targetPath, projectName)
		}

		author := formData.Author
		pythonVersion := "3.9" // Fixed version
		cicdTypeStr := formData.CICDType

		// Collect options
		var options []string
		if formData.GitInit {
			options = append(options, "git_init")
		}
		if formData.CreateEnv {
			options = append(options, "create_env")
		}
		if formData.InstallDeps {
			options = append(options, "install_deps")
		}

		// Show project info
		fmt.Println(lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Render("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"))

		fmt.Printf("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: %s\n", projectName)
		fmt.Printf("–ü—É—Ç—å: %s\n", targetPath)
		fmt.Printf("–ê–≤—Ç–æ—Ä: %s\n", author)
		fmt.Printf("Python –≤–µ—Ä—Å–∏—è: %s\n", pythonVersion)
		fmt.Printf("CI/CD —Å–∏—Å—Ç–µ–º–∞: %s\n", cicdTypeStr)
		if len(options) > 0 {
			fmt.Printf("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏: %s\n", strings.Join(options, ", "))
		}
		fmt.Println()

		// Create scaffolder with custom config
		config := &scaffolder.ScaffolderConfig{
			Author:      author,
			DefaultCICD: cicdTypeStr,
		}
		scaffolderInstance := scaffolder.NewScaffolderWithConfig(config)

		// Validate template
		if err := scaffolderInstance.ValidateTemplate("mcp"); err != nil {
			appErr := errorHandler.WrapTemplateError(err, "TEMPLATE_VALIDATION_FAILED", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ MCP")
			fmt.Println(errorHandler.Handle(appErr))
			os.Exit(1)
		}

		// Create project
		fmt.Println(lipgloss.NewStyle().
			Foreground(lipgloss.Color("240")).
			Render("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."))

		if err := scaffolderInstance.CreateProjectWithOptions("mcp", projectName, targetPath, cicdTypeStr, "", options); err != nil {
			appErr := errorHandler.WrapFileSystemError(err, "PROJECT_CREATION_FAILED", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ MCP")
			fmt.Println(errorHandler.Handle(appErr))
			os.Exit(1)
		}

		// Show success message
		successStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("2")).
			Border(lipgloss.RoundedBorder()).
			Padding(1, 2)

		fmt.Println(successStyle.Render("‚úÖ –ü—Ä–æ–µ–∫—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"))
		fmt.Println()

		// Show next steps
		nextSteps := lipgloss.NewStyle().
			Foreground(lipgloss.Color("252")).
			Render(fmt.Sprintf(`
–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞:
   cd %s

2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   make install
   # –∏–ª–∏
   pip install -r requirements.txt

3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
   cp env.example .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª

4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
   make run
   # –∏–ª–∏
   python src/main.py

5. –î–ª—è Docker:
   make docker-build
   make docker-run

üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md
üîß –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: make help
`, targetPath))

		fmt.Println(nextSteps)
	},
}

func init() {
	RootCMD.AddCommand(createMcpCmd)

	createMcpCmd.Flags().StringVarP(&mcpProjectPath, "path", "p", "", "–ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
	createMcpCmd.Flags().StringVarP(&mcpAuthor, "author", "a", "", "–ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ git config –∏–ª–∏ 'Cloud.ru Team')")
}
