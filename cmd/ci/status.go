package ci

import (
	"context"
	"fmt"
	"os"
	"text/tabwriter"
	"time"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloudru/ai-agents-cli/internal/di"
	"github.com/spf13/cobra"
)

var (
	statusTimeout int
	statusFormat  string
)

// statusCmd represents the status command
var statusCmd = &cobra.Command{
	Use:   "status [resource-type] [resource-id]",
	Short: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤",
	Long:  "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤, –∞–≥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
	Args:  cobra.RangeArgs(0, 2),
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å
		if len(args) == 2 {
			resourceType := args[0]
			resourceID := args[1]

			switch resourceType {
			case "mcp-server", "mcp":
				checkMCPServerStatus(ctx, resourceID)
			case "agent":
				checkAgentStatus(ctx, resourceID)
			case "agent-system", "system":
				checkAgentSystemStatus(ctx, resourceID)
			default:
				log.Fatal("Unknown resource type. Use: mcp-server, agent, or agent-system")
			}
			return
		}

		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
		if len(args) == 1 {
			resourceType := args[0]
			switch resourceType {
			case "mcp-servers", "mcp":
				checkAllMCPServersStatus(ctx)
			case "agents":
				checkAllAgentsStatus(ctx)
			case "agent-systems", "systems":
				checkAllAgentSystemsStatus(ctx)
			default:
				log.Fatal("Unknown resource type. Use: mcp-servers, agents, or agent-systems")
			}
			return
		}

		// –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
		checkOverallStatus(ctx)
	},
}

func checkMCPServerStatus(ctx context.Context, serverID string) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	server, err := apiClient.MCPServers.Get(ctx, serverID)
	if err != nil {
		log.Fatal("Failed to get MCP server", "error", err, "server_id", serverID)
	}

	printResourceStatus("MCP Server", serverID, server.Status, server.UpdatedAt.Time)
}

func checkAgentStatus(ctx context.Context, agentID string) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	agent, err := apiClient.Agents.Get(ctx, agentID)
	if err != nil {
		log.Fatal("Failed to get agent", "error", err, "agent_id", agentID)
	}

	printResourceStatus("Agent", agentID, agent.Status, agent.UpdatedAt.Time)
}

func checkAgentSystemStatus(ctx context.Context, systemID string) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	system, err := apiClient.AgentSystems.Get(ctx, systemID)
	if err != nil {
		log.Fatal("Failed to get agent system", "error", err, "system_id", systemID)
	}

	printResourceStatus("Agent System", systemID, system.Status, system.UpdatedAt)
}

func checkAllMCPServersStatus(ctx context.Context) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	servers, err := apiClient.MCPServers.List(ctx, 100, 0)
	if err != nil {
		log.Fatal("Failed to list MCP servers", "error", err)
	}

	printResourcesStatus("MCP Servers", servers.Data)
}

func checkAllAgentsStatus(ctx context.Context) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	agents, err := apiClient.Agents.List(ctx, 100, 0)
	if err != nil {
		log.Fatal("Failed to list agents", "error", err)
	}

	printResourcesStatus("Agents", agents.Data)
}

func checkAllAgentSystemsStatus(ctx context.Context) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	systems, err := apiClient.AgentSystems.List(ctx, 100, 0)
	if err != nil {
		log.Fatal("Failed to list agent systems", "error", err)
	}

	printResourcesStatus("Agent Systems", systems.Data)
}

func checkOverallStatus(ctx context.Context) {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
	servers, err := apiClient.MCPServers.List(ctx, 100, 0)
	if err != nil {
		log.Fatal("Failed to list MCP servers", "error", err)
	}

	agents, err := apiClient.Agents.List(ctx, 100, 0)
	if err != nil {
		log.Fatal("Failed to list agents", "error", err)
	}

	systems, err := apiClient.AgentSystems.List(ctx, 100, 0)
	if err != nil {
		log.Fatal("Failed to list agent systems", "error", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("205")).
		Border(lipgloss.RoundedBorder()).
		Padding(0, 1)

	// –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
	fmt.Println(headerStyle.Render("üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"))
	fmt.Println()

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
	activeServers := 0
	errorServers := 0
	for _, server := range servers.Data {
		switch server.Status {
		case "ACTIVE":
			activeServers++
		case "ERROR":
			errorServers++
		}
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
	activeAgents := 0
	errorAgents := 0
	for _, agent := range agents.Data {
		switch agent.Status {
		case "ACTIVE":
			activeAgents++
		case "ERROR":
			errorAgents++
		}
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º
	activeSystems := 0
	errorSystems := 0
	for _, system := range systems.Data {
		switch system.Status {
		case "ACTIVE":
			activeSystems++
		case "ERROR":
			errorSystems++
		}
	}

	// –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
	w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
	fmt.Fprintln(w, "–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞\t–í—Å–µ–≥–æ\t–ê–∫—Ç–∏–≤–Ω—ã—Ö\t–û—à–∏–±–æ–∫\t–°—Ç–∞—Ç—É—Å")
	fmt.Fprintln(w, "-----------\t-----\t--------\t-------\t------")

	// MCP —Å–µ—Ä–≤–µ—Ä—ã
	status := "üü¢ OK"
	if errorServers > 0 {
		status = "üî¥ ERROR"
	} else if activeServers == 0 {
		status = "‚ö™ NO DATA"
	}
	fmt.Fprintf(w, "MCP Servers\t%d\t%d\t%d\t%s\n",
		len(servers.Data), activeServers, errorServers, status)

	// –ê–≥–µ–Ω—Ç—ã
	status = "üü¢ OK"
	if errorAgents > 0 {
		status = "üî¥ ERROR"
	} else if activeAgents == 0 {
		status = "‚ö™ NO DATA"
	}
	fmt.Fprintf(w, "Agents\t%d\t%d\t%d\t%s\n",
		len(agents.Data), activeAgents, errorAgents, status)

	// –°–∏—Å—Ç–µ–º—ã
	status = "üü¢ OK"
	if errorSystems > 0 {
		status = "üî¥ ERROR"
	} else if activeSystems == 0 {
		status = "‚ö™ NO DATA"
	}
	fmt.Fprintf(w, "Agent Systems\t%d\t%d\t%d\t%s\n",
		len(systems.Data), activeSystems, errorSystems, status)

	w.Flush()

	// –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
	fmt.Println()
	totalErrors := errorServers + errorAgents + errorSystems
	if totalErrors == 0 {
		fmt.Println(lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("2")).Render("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"))
	} else {
		fmt.Println(lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("1")).Render(fmt.Sprintf("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %d –æ—à–∏–±–æ–∫", totalErrors)))
	}
}

func printResourceStatus(resourceType, resourceID, status string, updatedAt time.Time) {
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("205")).
		Border(lipgloss.RoundedBorder()).
		Padding(0, 1)

	statusStyle := lipgloss.NewStyle().Bold(true)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
	var statusColor lipgloss.Color
	var statusIcon string
	switch status {
	case "ACTIVE":
		statusColor = lipgloss.Color("2")
		statusIcon = "üü¢"
	case "SUSPENDED":
		statusColor = lipgloss.Color("3")
		statusIcon = "üü°"
	case "ERROR":
		statusColor = lipgloss.Color("1")
		statusIcon = "üî¥"
	default:
		statusColor = lipgloss.Color("8")
		statusIcon = "‚ö™"
	}

	fmt.Println(headerStyle.Render(fmt.Sprintf("%s %s", statusIcon, resourceType)))
	fmt.Printf("ID: %s\n", resourceID)
	fmt.Printf("–°—Ç–∞—Ç—É—Å: %s\n", statusStyle.Copy().Foreground(statusColor).Render(status))
	fmt.Printf("–û–±–Ω–æ–≤–ª–µ–Ω: %s\n", updatedAt.Format("02.01.2006 15:04:05"))
}

func printResourcesStatus(resourceType string, resources interface{}) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
	fmt.Printf("Status check for %s (implementation needed)\n", resourceType)
}

func init() {
	RootCMD.AddCommand(statusCmd)

	statusCmd.Flags().IntVarP(&statusTimeout, "timeout", "t", 30, "–¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (—Å–µ–∫—É–Ω–¥—ã)")
	statusCmd.Flags().StringVarP(&statusFormat, "format", "f", "table", "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (table, json)")
}
