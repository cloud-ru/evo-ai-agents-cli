package ci

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloudru/ai-agents-cli/internal/api"
	"github.com/spf13/cobra"
)

var (
	logsFollow     bool
	logsTail       int
	logsSince      string
	logsUntil      string
	logsLevel      string
	logsResource   string
	logsResourceID string
)

// logsCmd represents the logs command
var logsCmd = &cobra.Command{
	Use:   "logs [resource-type] [resource-id]",
	Short: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤",
	Long:  "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤, –∞–≥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
	Args:  cobra.RangeArgs(0, 2),
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å
		if len(args) == 2 {
			logsResource = args[0]
			logsResourceID = args[1]
		}

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
		ctx, cancel := context.WithCancel(ctx)
		defer cancel()

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		go func() {
			<-sigChan
			cancel()
		}()

		// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
		if logsFollow {
			monitorLogs(ctx)
		} else {
			showLogs(ctx)
		}
	},
}

func showLogs(ctx context.Context) {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("205")).
		Border(lipgloss.RoundedBorder()).
		Padding(0, 1)

	// –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	if logsResource != "" && logsResourceID != "" {
		fmt.Println(headerStyle.Render(fmt.Sprintf("üìã –õ–æ–≥–∏ %s %s", logsResource, logsResourceID)))
	} else {
		fmt.Println(headerStyle.Render("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"))
	}
	fmt.Println()

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Å—É—Ä—Å–∞
	if logsResource != "" && logsResourceID != "" {
		switch logsResource {
		case "mcp-server", "mcp":
			showMCPServerLogs(ctx, logsResourceID)
		case "agent":
			showAgentLogs(ctx, logsResourceID)
		case "agent-system", "system":
			showAgentSystemLogs(ctx, logsResourceID)
		default:
			log.Fatal("Unknown resource type. Use: mcp-server, agent, or agent-system")
		}
	} else {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
		showSystemLogs(ctx)
	}
}

func showMCPServerLogs(ctx context.Context, serverID string) {
	history, err := apiClient.MCPServers.GetHistory(ctx, serverID)
	if err != nil {
		log.Fatal("Failed to get MCP server history", "error", err, "server_id", serverID)
	}

	printLogs(history.Data)
}

func showAgentLogs(ctx context.Context, agentID string) {
	history, err := apiClient.Agents.GetHistory(ctx, agentID)
	if err != nil {
		log.Fatal("Failed to get agent history", "error", err, "agent_id", agentID)
	}

	printLogs(history.Data)
}

func showAgentSystemLogs(ctx context.Context, systemID string) {
	history, err := apiClient.AgentSystems.GetHistory(ctx, systemID)
	if err != nil {
		log.Fatal("Failed to get agent system history", "error", err, "system_id", systemID)
	}

	printLogs(history.Data)
}

func showSystemLogs(ctx context.Context) {
	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
	servers, err := apiClient.MCPServers.List(ctx, 50, 0)
	if err != nil {
		log.Fatal("Failed to list MCP servers", "error", err)
	}

	agents, err := apiClient.Agents.List(ctx, 50, 0)
	if err != nil {
		log.Fatal("Failed to list agents", "error", err)
	}

	systems, err := apiClient.AgentSystems.List(ctx, 50, 0)
	if err != nil {
		log.Fatal("Failed to list agent systems", "error", err)
	}

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
	var allLogs []api.HistoryEntry

	// –õ–æ–≥–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
	for _, server := range servers.Data {
		history, err := apiClient.MCPServers.GetHistory(ctx, server.ID)
		if err == nil {
			allLogs = append(allLogs, history.Data...)
		}
	}

	// –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤
	for _, agent := range agents.Data {
		history, err := apiClient.Agents.GetHistory(ctx, agent.ID)
		if err == nil {
			allLogs = append(allLogs, history.Data...)
		}
	}

	// –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º
	for _, system := range systems.Data {
		history, err := apiClient.AgentSystems.GetHistory(ctx, system.ID)
		if err == nil {
			allLogs = append(allLogs, history.Data...)
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
	sortLogsByTime(allLogs)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	if logsTail > 0 && len(allLogs) > logsTail {
		allLogs = allLogs[:logsTail]
	}

	printLogs(allLogs)
}

func printLogs(logs []api.HistoryEntry) {
	if len(logs) == 0 {
		fmt.Println("üîç –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
	timeStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("8")).
		Bold(false)

	actionStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("99"))

	statusStyle := lipgloss.NewStyle().
		Bold(true)

	// –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏
	for _, entry := range logs {
		// –í—Ä–µ–º—è
		timeStr := timeStyle.Render(entry.CreatedAt.Format("15:04:05"))

		// –î–µ–π—Å—Ç–≤–∏–µ
		actionStr := actionStyle.Render(entry.Action)

		// –°—Ç–∞—Ç—É—Å
		var statusStr string
		switch entry.Status {
		case "SUCCESS":
			statusStr = statusStyle.Copy().Foreground(lipgloss.Color("2")).Render("‚úÖ")
		case "ERROR":
			statusStr = statusStyle.Copy().Foreground(lipgloss.Color("1")).Render("‚ùå")
		case "PENDING":
			statusStr = statusStyle.Copy().Foreground(lipgloss.Color("3")).Render("‚è≥")
		default:
			statusStr = statusStyle.Copy().Foreground(lipgloss.Color("8")).Render("‚ö™")
		}

		// –°–æ–æ–±—â–µ–Ω–∏–µ
		messageStr := entry.Message
		if len(messageStr) > 100 {
			messageStr = messageStr[:100] + "..."
		}

		fmt.Printf("%s %s %s %s\n", timeStr, actionStr, statusStr, messageStr)
	}
}

func monitorLogs(ctx context.Context) {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("205")).
		Border(lipgloss.RoundedBorder()).
		Padding(0, 1)

	fmt.Println(headerStyle.Render("üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)"))
	fmt.Println()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
	showLogs(ctx)

	// –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			fmt.Println("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		case <-ticker.C:
			// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∑–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤
			// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–æ—á–∫—É
			fmt.Print(".")
		}
	}
}

func sortLogsByTime(logs []api.HistoryEntry) {
	// –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
	for i := 0; i < len(logs)-1; i++ {
		for j := 0; j < len(logs)-i-1; j++ {
			if logs[j].CreatedAt.Before(logs[j+1].CreatedAt) {
				logs[j], logs[j+1] = logs[j+1], logs[j]
			}
		}
	}
}

func init() {
	RootCMD.AddCommand(logsCmd)

	logsCmd.Flags().BoolVarP(&logsFollow, "follow", "f", false, "–°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
	logsCmd.Flags().IntVarP(&logsTail, "tail", "n", 50, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞")
	logsCmd.Flags().StringVarP(&logsSince, "since", "s", "", "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
	logsCmd.Flags().StringVarP(&logsUntil, "until", "u", "", "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
	logsCmd.Flags().StringVarP(&logsLevel, "level", "l", "", "–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–æ–≤")
}
