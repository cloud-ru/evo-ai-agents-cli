package mcp_server

import (
	"context"
	"fmt"
	"os"
	"text/tabwriter"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/spf13/cobra"
)

// historyCmd represents the history command
var historyCmd = &cobra.Command{
	Use:   "history <server-id>",
	Short: "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π MCP —Å–µ—Ä–≤–µ—Ä–∞",
	Long:  "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()
		serverID := args[0]

		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é MCP —Å–µ—Ä–≤–µ—Ä–∞
		history, err := apiClient.MCPServers.GetHistory(ctx, serverID)
		if err != nil {
			log.Fatal("Failed to get MCP server history", "error", err, "server_id", serverID)
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		headerStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		statusStyle := lipgloss.NewStyle().
			Bold(true)

		// –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		fmt.Println(headerStyle.Render(fmt.Sprintf("üìú –ò—Å—Ç–æ—Ä–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ %s", serverID[:8]+"...")))
		fmt.Println()

		if len(history.Data) == 0 {
			fmt.Println("üîç –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
		w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
		fmt.Fprintln(w, "–í—Ä–µ–º—è\t–î–µ–π—Å—Ç–≤–∏–µ\t–°—Ç–∞—Ç—É—Å\t–°–æ–æ–±—â–µ–Ω–∏–µ")
		fmt.Fprintln(w, "-----\t--------\t------\t--------")

		for _, entry := range history.Data {
			status := entry.Status
			switch status {
			case "SUCCESS":
				status = statusStyle.Copy().Foreground(lipgloss.Color("2")).Render("‚úÖ –£—Å–ø–µ—Ö")
			case "ERROR":
				status = statusStyle.Copy().Foreground(lipgloss.Color("1")).Render("‚ùå –û—à–∏–±–∫–∞")
			case "PENDING":
				status = statusStyle.Copy().Foreground(lipgloss.Color("3")).Render("‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ")
			default:
				status = statusStyle.Copy().Foreground(lipgloss.Color("8")).Render("‚ö™ " + status)
			}

			fmt.Fprintf(w, "%s\t%s\t%s\t%s\n",
				entry.CreatedAt.Format("02.01.2006 15:04:05"),
				entry.Action,
				status,
				entry.Message,
			)
		}

		w.Flush()
	},
}

func init() {
	RootCMD.AddCommand(historyCmd)
}
