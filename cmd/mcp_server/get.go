package mcp_server

import (
	"context"
	"encoding/json"
	"fmt"
	"os"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloudru/ai-agents-cli/internal/di"
	"github.com/spf13/cobra"
)

var (
	outputFormat string
)

// getCmd represents the get command
var getCmd = &cobra.Command{
	Use:   "get <server-id>",
	Short: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MCP —Å–µ—Ä–≤–µ—Ä–µ",
	Long:  "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º MCP —Å–µ—Ä–≤–µ—Ä–µ",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()
		serverID := args[0]

		// –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		container := di.GetContainer()
		apiClient := container.GetAPI()

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MCP —Å–µ—Ä–≤–µ—Ä–µ
		server, err := apiClient.MCPServers.Get(ctx, serverID)
		if err != nil {
			log.Fatal("Failed to get MCP server", "error", err, "server_id", serverID)
		}

		if outputFormat == "json" {
			// –í—ã–≤–æ–¥–∏–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
			encoder := json.NewEncoder(os.Stdout)
			encoder.SetIndent("", "  ")
			if err := encoder.Encode(server); err != nil {
				log.Fatal("Failed to encode JSON", "error", err)
			}
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		headerStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		labelStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("99"))

		valueStyle := lipgloss.NewStyle().
			Foreground(lipgloss.Color("252"))

		statusStyle := lipgloss.NewStyle().
			Bold(true)

		// –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		fmt.Println(headerStyle.Render("üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MCP —Å–µ—Ä–≤–µ—Ä–µ"))
		fmt.Println()

		// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		fmt.Printf("%s: %s\n", labelStyle.Render("ID"), valueStyle.Render(server.ID))
		fmt.Printf("%s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(server.Name))

		if server.Description != "" {
			fmt.Printf("%s: %s\n", labelStyle.Render("–û–ø–∏—Å–∞–Ω–∏–µ"), valueStyle.Render(server.Description))
		}

		// –°—Ç–∞—Ç—É—Å
		status := server.Status
		switch status {
		case "ACTIVE":
			status = statusStyle.Copy().Foreground(lipgloss.Color("2")).Render("üü¢ –ê–∫—Ç–∏–≤–µ–Ω")
		case "SUSPENDED":
			status = statusStyle.Copy().Foreground(lipgloss.Color("3")).Render("üü° –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		case "ERROR":
			status = statusStyle.Copy().Foreground(lipgloss.Color("1")).Render("üî¥ –û—à–∏–±–∫–∞")
		default:
			status = statusStyle.Copy().Foreground(lipgloss.Color("8")).Render("‚ö™ " + status)
		}
		fmt.Printf("%s: %s\n", labelStyle.Render("–°—Ç–∞—Ç—É—Å"), status)

		// –î–∞—Ç—ã
		fmt.Printf("%s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–Ω"), valueStyle.Render(server.CreatedAt.Time.Format("02.01.2006 15:04:05")))
		fmt.Printf("%s: %s\n", labelStyle.Render("–û–±–Ω–æ–≤–ª–µ–Ω"), valueStyle.Render(server.UpdatedAt.Time.Format("02.01.2006 15:04:05")))

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		fmt.Println()
		fmt.Println(labelStyle.Render("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"))
		fmt.Printf("  %s: %s\n", labelStyle.Render("–û–ø—Ü–∏–π"), valueStyle.Render(fmt.Sprintf("%d", len(server.Options))))

		// –û–ø—Ü–∏–∏
		if len(server.Options) > 0 {
			fmt.Println()
			fmt.Println(labelStyle.Render("‚öôÔ∏è  –û–ø—Ü–∏–∏:"))
			for key, value := range server.Options {
				valueStr := fmt.Sprintf("%v", value)
				if len(valueStr) > 60 {
					valueStr = valueStr[:60] + "..."
				}
				fmt.Printf("  %s: %s\n", labelStyle.Render(key), valueStyle.Render(valueStr))
			}
		} else {
			fmt.Println()
			fmt.Println(labelStyle.Render("‚öôÔ∏è  –û–ø—Ü–∏–∏:") + " " + valueStyle.Render("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"))
		}

		// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
		if len(server.Tools) > 0 {
			fmt.Println()
			fmt.Println(labelStyle.Render("üõ†Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"))
			for _, tool := range server.Tools {
				fmt.Printf("  ‚Ä¢ %s: %s\n",
					labelStyle.Render(tool.Name),
					valueStyle.Render(tool.Description))
			}
		}
	},
}

func init() {
	RootCMD.AddCommand(getCmd)

	getCmd.Flags().StringVarP(&outputFormat, "output", "o", "table", "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (table, json)")
}
