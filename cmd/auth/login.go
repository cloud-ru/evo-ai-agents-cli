package auth

import (
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/cloud-ru/evo-ai-agents-cli/internal/auth"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/errors"
	"github.com/charmbracelet/huh"
	"github.com/spf13/cobra"
)

// loginCmd –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
var loginCmd = &cobra.Command{
	Use:   "login",
	Short: "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É AI Agents",
	Long: `–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É AI Agents.

–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  ai-agents-cli auth login
  ai-agents-cli auth login --endpoint https://api.cloud.ru`,
	Run: func(cmd *cobra.Command, args []string) {
		// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
		errorHandler := errors.NewHandler()

		// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		credentialsManager := auth.NewCredentialsManager()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		if credentialsManager.HasCredentials() {
			fmt.Println("üîê –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
			
			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			creds, err := credentialsManager.LoadCredentials()
			if err != nil {
				appErr := errorHandler.WrapFileSystemError(err, "CREDENTIALS_LOAD_FAILED", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
				appErr = appErr.WithSuggestions(
					"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ai-agents-cli auth logout",
					"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: " + credentialsManager.GetCredentialsPath(),
					"üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://cloud.ru/docs/ai-agents/ug/index?source-platform=Evolution",
				)
				fmt.Println(errorHandler.HandlePlain(appErr))
				os.Exit(1)
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			fmt.Printf("üìß Email: %s\n", creds.UserEmail)
			fmt.Printf("üîë Key ID: %s\n", maskString(creds.IAMKeyID))
			fmt.Printf("üåê Endpoint: %s\n", creds.IAMEndpoint)
			fmt.Printf("‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: %s\n", creds.LastLogin)
			
			// –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
			var shouldRelogin bool
			form := huh.NewForm(
				huh.NewGroup(
					huh.NewConfirm().
						Title("üîÑ –ü–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è?").
						Description("–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏?").
						Value(&shouldRelogin),
				),
			).WithTheme(huh.ThemeCharm())

			if err := form.Run(); err != nil {
				appErr := errorHandler.WrapUserError(err, "FORM_ERROR", "–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")
				fmt.Println(errorHandler.HandlePlain(appErr))
				os.Exit(1)
			}

			if !shouldRelogin {
				fmt.Println("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
				return
			}
		}

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		var loginData struct {
			IAMKeyID     string
			IAMSecretKey string
			IAMEndpoint  string
			UserEmail    string
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		loginData.IAMEndpoint = "https://api.cloud.ru"

		form := huh.NewForm(
			huh.NewGroup(
				huh.NewInput().
					Title("üîë IAM Key ID").
					Description("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à IAM Key ID").
					Value(&loginData.IAMKeyID).
					Validate(func(str string) error {
						if str == "" {
							return errors.ValidationError("MISSING_KEY_ID", "IAM Key ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
						}
						return nil
					}),

				huh.NewInput().
					Title("üîê IAM Secret Key").
					Description("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à IAM Secret Key").
					Value(&loginData.IAMSecretKey).
					Password(true).
					Validate(func(str string) error {
						if str == "" {
							return errors.ValidationError("MISSING_SECRET_KEY", "IAM Secret Key –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
						}
						return nil
					}),

				huh.NewInput().
					Title("üåê IAM Endpoint").
					Description("–í–≤–µ–¥–∏—Ç–µ IAM Endpoint URL").
					Value(&loginData.IAMEndpoint).
					Validate(func(str string) error {
						if str == "" {
							return errors.ValidationError("MISSING_ENDPOINT", "IAM Endpoint –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
						}
						if !strings.HasPrefix(str, "http") {
							return errors.ValidationError("INVALID_ENDPOINT", "Endpoint –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
						}
						return nil
					}),

				huh.NewInput().
					Title("üìß Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)").
					Description("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏").
					Value(&loginData.UserEmail),
			),
		).WithTheme(huh.ThemeCharm()).
			WithWidth(120).
			WithHeight(40)

		if err := form.Run(); err != nil {
			appErr := errorHandler.WrapUserError(err, "FORM_ERROR", "–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞")
			fmt.Println(errorHandler.HandlePlain(appErr))
			os.Exit(1)
		}

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		creds := &auth.Credentials{
			IAMKeyID:     loginData.IAMKeyID,
			IAMSecretKey: loginData.IAMSecretKey,
			IAMEndpoint:  loginData.IAMEndpoint,
			UserEmail:    loginData.UserEmail,
			LastLogin:    time.Now().Format("2006-01-02 15:04:05"),
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		if err := credentialsManager.SaveCredentials(creds); err != nil {
			appErr := errorHandler.WrapFileSystemError(err, "CREDENTIALS_SAVE_FAILED", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
			appErr = appErr.WithSuggestions(
				"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
				"–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
				"üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://cloud.ru/docs/ai-agents/ug/index?source-platform=Evolution",
			)
			fmt.Println(errorHandler.HandlePlain(appErr))
			os.Exit(1)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
		if err := credentialsManager.SetEnvironmentVariables(); err != nil {
			appErr := errorHandler.WrapConfigurationError(err, "ENV_SET_FAILED", "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
			fmt.Println(errorHandler.HandlePlain(appErr))
			os.Exit(1)
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		successStyle := fmt.Sprintf(`
‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!

üìß Email: %s
üîë Key ID: %s
üåê Endpoint: %s
‚è∞ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: %s

üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!
`, 
			loginData.UserEmail,
			maskString(loginData.IAMKeyID),
			loginData.IAMEndpoint,
			creds.LastLogin,
		)

		fmt.Println(successStyle)
	},
}

// maskString –º–∞—Å–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func maskString(s string) string {
	if len(s) <= 8 {
		return strings.Repeat("*", len(s))
	}
	return s[:4] + strings.Repeat("*", len(s)-8) + s[len(s)-4:]
}
