package agent

import (
	"context"
	"fmt"
	"os"
	"text/tabwriter"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/spf13/cobra"
)

var (
	agentLimit  int
	agentOffset int
)

// listCmd represents the list command
var listCmd = &cobra.Command{
	Use:   "list",
	Short: "–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤",
	Long:  "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ",
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
		agents, err := apiClient.Agents.List(ctx, agentLimit, agentOffset)
		if err != nil {
			log.Fatal("Failed to list agents", "error", err)
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		headerStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		statusStyle := lipgloss.NewStyle().
			Bold(true)

		// –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		fmt.Println(headerStyle.Render(fmt.Sprintf("ü§ñ –ê–≥–µ–Ω—Ç—ã (–≤—Å–µ–≥–æ: %d)", agents.Total)))
		fmt.Println()

		if len(agents.Data) == 0 {
			fmt.Println("üîç –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
		w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
		fmt.Fprintln(w, "ID\t–ù–∞–∑–≤–∞–Ω–∏–µ\t–°—Ç–∞—Ç—É—Å\t–°–æ–∑–¥–∞–Ω\t–û–±–Ω–æ–≤–ª–µ–Ω")
		fmt.Fprintln(w, "---\t--------\t------\t------\t--------")

		for _, agent := range agents.Data {
			status := agent.Status
			switch status {
			case "ACTIVE":
				status = statusStyle.Copy().Foreground(lipgloss.Color("2")).Render("üü¢ –ê–∫—Ç–∏–≤–µ–Ω")
			case "SUSPENDED":
				status = statusStyle.Copy().Foreground(lipgloss.Color("3")).Render("üü° –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			case "ERROR":
				status = statusStyle.Copy().Foreground(lipgloss.Color("1")).Render("üî¥ –û—à–∏–±–∫–∞")
			default:
				status = statusStyle.Copy().Foreground(lipgloss.Color("8")).Render("‚ö™ " + status)
			}

			fmt.Fprintf(w, "%s\t%s\t%s\t%s\t%s\n",
				agent.ID[:8]+"...",
				agent.Name,
				status,
				agent.CreatedAt.Format("02.01.2006 15:04"),
				agent.UpdatedAt.Format("02.01.2006 15:04"),
			)
		}

		w.Flush()
	},
}

func init() {
	RootCMD.AddCommand(listCmd)

	listCmd.Flags().IntVarP(&agentLimit, "limit", "l", 20, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
	listCmd.Flags().IntVarP(&agentOffset, "offset", "o", 0, "–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
}
