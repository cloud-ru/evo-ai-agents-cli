package agent

import (
	"context"
	"fmt"
	"os"
	"strings"
	"text/tabwriter"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/api"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/di"
	"github.com/spf13/cobra"
)

var (
	marketplaceLimit      int
	marketplaceOffset     int
	marketplaceName       string
	marketplaceTags       []string
	marketplaceCategories []string
	marketplaceStatuses   []string
	marketplaceTypes      []string
)

// marketplaceCmd represents the marketplace command
var marketplaceCmd = &cobra.Command{
	Use:   "marketplace",
	Short: "–ü–æ–∏—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ",
	Long:  "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ",
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		container := di.GetContainer()
		apiClient := container.GetAPI()

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
		searchReq := &api.MarketplaceSearchRequest{
			Limit:      marketplaceLimit,
			Offset:     marketplaceOffset,
			Name:       marketplaceName,
			Tags:       marketplaceTags,
			Categories: marketplaceCategories,
			Statuses:   marketplaceStatuses,
			Types:      marketplaceTypes,
		}

		// –ò—â–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
		result, err := apiClient.Agents.SearchMarketplace(ctx, searchReq)
		if err != nil {
			log.Fatal("Failed to search marketplace", "error", err)
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		headerStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		statusStyle := lipgloss.NewStyle().
			Bold(true)

		typeStyle := lipgloss.NewStyle().
			Bold(true)

		// –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		fmt.Println(headerStyle.Render(fmt.Sprintf("üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∞–≥–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ: %d)", result.Total)))
		fmt.Println()

		if len(result.Data) == 0 {
			fmt.Println("üîç –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
		w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
		fmt.Fprintln(w, "ID\t–ù–∞–∑–≤–∞–Ω–∏–µ\t–¢–∏–ø\t–°—Ç–∞—Ç—É—Å\t–ö–∞—Ç–µ–≥–æ—Ä–∏–∏\t–¢–µ–≥–∏")
		fmt.Fprintln(w, "---\t--------\t---\t------\t----------\t----")

		for _, agent := range result.Data {
			// –°—Ç–∞—Ç—É—Å
			status := agent.Status
			switch status {
			case "AGENT_PREDEFINED_STATUS_AVAILABLE":
				status = statusStyle.Copy().Foreground(lipgloss.Color("2")).Render("üü¢ –î–æ—Å—Ç—É–ø–µ–Ω")
			case "AGENT_PREDEFINED_STATUS_PREVIEW":
				status = statusStyle.Copy().Foreground(lipgloss.Color("3")).Render("üëÅÔ∏è –ü—Ä–µ–≤—å—é")
			default:
				status = statusStyle.Copy().Foreground(lipgloss.Color("8")).Render("‚ö™ " + status)
			}

			// –¢–∏–ø
			agentType := agent.Type
			switch agentType {
			case "AGENT_PREDEFINED_TYPE_FREE_TIER":
				agentType = typeStyle.Copy().Foreground(lipgloss.Color("2")).Render("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π")
			case "AGENT_PREDEFINED_TYPE_PAYABLE":
				agentType = typeStyle.Copy().Foreground(lipgloss.Color("3")).Render("üí∞ –ü–ª–∞—Ç–Ω—ã–π")
			case "AGENT_PREDEFINED_TYPE_INTERNAL":
				agentType = typeStyle.Copy().Foreground(lipgloss.Color("1")).Render("üè¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π")
			default:
				agentType = typeStyle.Copy().Foreground(lipgloss.Color("8")).Render("‚ö™ " + agentType)
			}

			// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏
			categories := strings.Join(agent.Categories, ", ")
			if len(categories) > 30 {
				categories = categories[:30] + "..."
			}

			tags := strings.Join(agent.Tags, ", ")
			if len(tags) > 30 {
				tags = tags[:30] + "..."
			}

			fmt.Fprintf(w, "%s\t%s\t%s\t%s\t%s\t%s\n",
				agent.ID[:8]+"...",
				agent.Name,
				agentType,
				status,
				categories,
				tags,
			)
		}

		w.Flush()

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏
		if len(result.Categories) > 0 || len(result.Tags) > 0 {
			fmt.Println()
			fmt.Println(headerStyle.Render("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"))

			if len(result.Categories) > 0 {
				fmt.Printf("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: %s\n", strings.Join(result.Categories, ", "))
			}
			if len(result.Tags) > 0 {
				fmt.Printf("–¢–µ–≥–∏: %s\n", strings.Join(result.Tags, ", "))
			}
		}
	},
}

func init() {
	RootCMD.AddCommand(marketplaceCmd)

	marketplaceCmd.Flags().IntVarP(&marketplaceLimit, "limit", "l", 20, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
	marketplaceCmd.Flags().IntVarP(&marketplaceOffset, "offset", "o", 0, "–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
	marketplaceCmd.Flags().StringVarP(&marketplaceName, "name", "n", "", "–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∞–≥–µ–Ω—Ç–∞")
	marketplaceCmd.Flags().StringSliceVarP(&marketplaceTags, "tags", "t", []string{}, "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º")
	marketplaceCmd.Flags().StringSliceVarP(&marketplaceCategories, "categories", "c", []string{}, "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
	marketplaceCmd.Flags().StringSliceVarP(&marketplaceStatuses, "statuses", "s", []string{}, "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
	marketplaceCmd.Flags().StringSliceVarP(&marketplaceTypes, "types", "y", []string{}, "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º")
}
