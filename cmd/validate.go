package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloudru/ai-agents-cli/internal/validator"
	"github.com/spf13/cobra"
)

var (
	validateFile string
	validateDir  string
)

// validateCmd represents the validate command
var validateCmd = &cobra.Command{
	Use:   "validate [config-file|directory]",
	Short: "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
	Long: `–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è AI Agents.

–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å YAML –∏ JSON —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–ø–µ—Ä–µ–¥ –∏—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤ –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ YAML —Ñ–∞–π–ª—ã (.yaml, .yml)
‚Ä¢ JSON —Ñ–∞–π–ª—ã (.json)

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:
‚Ä¢ –ê–≥–µ–Ω—Ç—ã (agents)
‚Ä¢ MCP —Å–µ—Ä–≤–µ—Ä—ã (mcp-servers) 
‚Ä¢ –°–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤ (agent-systems)

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  ai-agents-cli validate examples/agents.yaml
  ai-agents-cli validate examples/
  ai-agents-cli validate --file config.yaml`,
	Args:  cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		log.Info("–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
		
		// –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
		configValidator := validator.NewConfigValidator()
		log.Debug("–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—ã
		log.Info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
		if err := loadSchemas(configValidator); err != nil {
			log.Warn("Failed to load schemas", "error", err)
		} else {
			log.Info("–°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
		var files []string

		if len(args) > 0 {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
			if info, err := os.Stat(args[0]); err == nil && info.IsDir() {
				var err error
				files, err = findConfigFiles(args[0])
				if err != nil {
					log.Fatal("Failed to find config files", "error", err, "dir", args[0])
				}
			} else {
				files = []string{args[0]}
			}
		} else if validateFile != "" {
			files = []string{validateFile}
		} else if validateDir != "" {
			// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
			var err error
			files, err = findConfigFiles(validateDir)
			if err != nil {
				log.Fatal("Failed to find config files", "error", err, "dir", validateDir)
			}
		} else {
			// –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
			var err error
			files, err = findConfigFiles(".")
			if err != nil {
				log.Fatal("Failed to find config files", "error", err)
			}
		}

		if len(files) == 0 {
			log.Error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			log.Fatal("No configuration files found")
		}

		log.Info("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "count", len(files), "files", files)

		// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
		allValid := true
		headerStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		fmt.Println(headerStyle.Render("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"))
		fmt.Println()

		for _, file := range files {
			fmt.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ %s...\n", file)
			log.Debug("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞", "file", file)

			result, err := configValidator.ValidateFile(file)
			if err != nil {
				log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞", "file", file, "error", err)
				allValid = false
				continue
			}

			if !result.Valid {
				log.Warn("–§–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é", "file", file, "errors", len(result.Errors))
				allValid = false
				configValidator.PrintErrors(result)
			} else {
				log.Info("–§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω", "file", file)
			}
			fmt.Println()
		}

		// –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if allValid {
			fmt.Println(headerStyle.Copy().Foreground(lipgloss.Color("2")).Render("üéâ –í—Å–µ —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã!"))
			os.Exit(0)
		} else {
			fmt.Println(headerStyle.Copy().Foreground(lipgloss.Color("1")).Render("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"))
			os.Exit(1)
		}
	},
}

func loadSchemas(validator *validator.ConfigValidator) error {
	schemas := map[string]string{
		"mcp-servers":   "schemas/mcp.schema.json",
		"agents":        "schemas/agent.schema.json",
		"agent-systems": "schemas/systems.schema.json",
	}

	for name, path := range schemas {
		if err := validator.LoadSchema(name, path); err != nil {
			log.Warn("Failed to load schema", "schema", name, "path", path, "error", err)
		}
	}

	return nil
}

func findConfigFiles(dir string) ([]string, error) {
	var files []string

	// –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ .yaml, .yml, .json
	extensions := []string{".yaml", ".yml", ".json"}

	entries, err := os.ReadDir(dir)
	if err != nil {
		return nil, err
	}

	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}

		name := entry.Name()
		for _, ext := range extensions {
			if len(name) > len(ext) && name[len(name)-len(ext):] == ext {
				// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
				files = append(files, filepath.Join(dir, name))
				break
			}
		}
	}

	return files, nil
}

func init() {
	RootCMD.AddCommand(validateCmd)

	validateCmd.Flags().StringVarP(&validateFile, "file", "f", "", "–§–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
	validateCmd.Flags().StringVarP(&validateDir, "dir", "d", "", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
}
