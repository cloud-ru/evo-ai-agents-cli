package cmd

import (
	"context"
	"fmt"
	"os"

	"github.com/charmbracelet/log"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/deployer"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/di"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/ui"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

var (
	deployFile         string
	deployDryRun       bool
	deployValidateOnly bool
)

// deployCmd represents the deploy command
var deployCmd = &cobra.Command{
	Use:   "deploy [config-file]",
	Short: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–∑ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
	Long: `–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

–ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
1. MCP —Å–µ—Ä–≤–µ—Ä—ã
2. –ê–≥–µ–Ω—Ç—ã (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º)
3. –°–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤ (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∞–≥–µ–Ω—Ç–∞–º)

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ !include
‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ JSON —Å—Ö–µ–º–∞–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
‚Ä¢ –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (dry-run)
‚Ä¢ –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  ai-agents-cli deploy config.yaml
  ai-agents-cli deploy --file config.yaml --dry-run
  ai-agents-cli deploy --validate-only`,
	Args: cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		configFile := deployFile
		if len(args) > 0 {
			configFile = args[0]
		}

		if configFile == "" {
			// –ò—â–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			defaultFiles := []string{
				"ai-agents.yaml",
				"ai-agents.yml",
				"deploy.yaml",
				"deploy.yml",
				"config.yaml",
				"config.yml",
			}

			for _, file := range defaultFiles {
				if _, err := os.Stat(file); err == nil {
					configFile = file
					fmt.Printf("üìÅ Using configuration file: %s\n", file)
					break
				}
			}

			if configFile == "" {
				fmt.Println("‚ùå No configuration file found. Looking for:")
				for _, file := range defaultFiles {
					fmt.Printf("   - %s\n", file)
				}
				fmt.Println("\nüí° Create one of these files or specify with: ai-agents-cli deploy <file>")
				os.Exit(1)
			}
		}

		// –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		container := di.GetContainer()
		apiClient := container.GetAPI()

		// –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π–µ—Ä—ã
		mcpDeployer := deployer.NewMCPDeployer(apiClient)
		agentDeployer := deployer.NewAgentDeployer(apiClient)
		systemDeployer := deployer.NewSystemDeployer(apiClient)

		// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		fmt.Println(ui.FormatInfo("Validating configuration..."))

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
		configType, err := detectConfigType(configFile)
		if err != nil {
			log.Error("Failed to detect configuration type", "error", err)
			fmt.Println(ui.CheckAndDisplayError(err))
			return
		}

		// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		switch configType {
		case "mcp":
			if err := mcpDeployer.ValidateMCPServers(configFile); err != nil {
				log.Error("MCP configuration validation failed", "error", err)
				fmt.Println(ui.CheckAndDisplayError(err))
				return
			}
		case "agent":
			if err := agentDeployer.ValidateAgents(configFile); err != nil {
				log.Error("Agent configuration validation failed", "error", err)
				fmt.Println(ui.CheckAndDisplayError(err))
				return
			}
		case "system":
			if err := systemDeployer.ValidateSystems(configFile); err != nil {
				log.Error("System configuration validation failed", "error", err)
				fmt.Println(ui.CheckAndDisplayError(err))
				return
			}
		case "mixed":
			// –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
			if err := mcpDeployer.ValidateMCPServers(configFile); err != nil {
				log.Warn("MCP section validation failed", "error", err)
			}
			if err := agentDeployer.ValidateAgents(configFile); err != nil {
				log.Warn("Agent section validation failed", "error", err)
			}
			if err := systemDeployer.ValidateSystems(configFile); err != nil {
				log.Warn("System section validation failed", "error", err)
			}
		}

		fmt.Println(ui.FormatSuccess("Configuration is valid"))

		if deployValidateOnly {
			fmt.Println(ui.FormatInfo("Validation completed successfully"))
			return
		}

		// –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
		fmt.Println(ui.FormatInfo("Starting deployment..."))

		var allResults []deployer.DeployResult

		// 1. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä—ã
		if configType == "mcp" || configType == "mixed" {
			fmt.Println(ui.FormatInfo("Deploying MCP servers..."))
			mcpResults, err := mcpDeployer.DeployMCPServers(ctx, configFile, deployDryRun)
			if err != nil {
				log.Error("MCP deployment failed", "error", err)
				fmt.Println(ui.FormatError("MCP deployment failed: " + err.Error()))
			} else {
				allResults = append(allResults, mcpResults...)
			}
		}

		// 2. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
		if configType == "agent" || configType == "mixed" {
			fmt.Println(ui.FormatInfo("Deploying agents..."))
			agentResults, err := agentDeployer.DeployAgents(ctx, configFile, deployDryRun)
			if err != nil {
				log.Error("Agent deployment failed", "error", err)
				fmt.Println(ui.FormatError("Agent deployment failed: " + err.Error()))
			} else {
				allResults = append(allResults, agentResults...)
			}
		}

		// 3. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
		if configType == "system" || configType == "mixed" {
			fmt.Println(ui.FormatInfo("Deploying agent systems..."))
			systemResults, err := systemDeployer.DeploySystems(ctx, configFile, deployDryRun)
			if err != nil {
				log.Error("System deployment failed", "error", err)
				fmt.Println(ui.FormatError("System deployment failed: " + err.Error()))
			} else {
				allResults = append(allResults, systemResults...)
			}
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		fmt.Println(ui.FormatInfo("Deployment completed!"))
		deployer.ShowDeployResults(allResults)
	},
}

// detectConfigType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func detectConfigType(configFile string) (string, error) {
	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	data, err := os.ReadFile(configFile)
	if err != nil {
		return "", fmt.Errorf("failed to read config file: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º YAML
	var config map[string]interface{}
	if err := yaml.Unmarshal(data, &config); err != nil {
		return "", fmt.Errorf("failed to parse YAML: %w", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–µ–∫—Ü–∏–π
	hasMCP := config["mcp-servers"] != nil
	hasAgents := config["agents"] != nil
	hasSystems := config["agent-systems"] != nil

	sectionCount := 0
	if hasMCP {
		sectionCount++
	}
	if hasAgents {
		sectionCount++
	}
	if hasSystems {
		sectionCount++
	}

	if sectionCount == 0 {
		return "", fmt.Errorf("no recognized configuration sections found")
	}

	if sectionCount == 1 {
		if hasMCP {
			return "mcp", nil
		}
		if hasAgents {
			return "agent", nil
		}
		if hasSystems {
			return "system", nil
		}
	}

	return "mixed", nil
}

func init() {
	RootCMD.AddCommand(deployCmd)

	deployCmd.Flags().StringVarP(&deployFile, "file", "f", "", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	deployCmd.Flags().BoolVarP(&deployDryRun, "dry-run", "d", false, "–†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
	deployCmd.Flags().BoolVar(&deployValidateOnly, "validate-only", false, "–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
}
