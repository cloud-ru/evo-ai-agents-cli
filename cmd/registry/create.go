package registry

import (
	"context"
	"fmt"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/api"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/di"
	"github.com/spf13/cobra"
)

var (
	createName     string
	createType     string
	createIsPublic bool
)

// createCmd represents the create command
var createCmd = &cobra.Command{
	Use:   "create",
	Short: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–∑–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤",
	Long:  "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–µ—Å—Ç—Ä –≤ Artifact Registry –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤",
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		if createName == "" {
			log.Fatal("Name is required. Use --name flag")
		}

		// –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		container := di.GetContainer()
		apiClient, err := container.GetAPI()
		if err != nil {
			log.Fatal("Failed to get API client", "error", err)
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–µ—Å—Ç—Ä–∞
		var registryType api.RegistryType
		switch createType {
		case "debian":
			registryType = api.RegistryTypeDebian
		case "rpm":
			registryType = api.RegistryTypeRPM
		default:
			registryType = api.RegistryTypeDocker
		}

		// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
		req := &api.RegistryCreateRequest{
			Name:         createName,
			RegistryType: registryType,
			IsPublic:     createIsPublic,
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é)
		operation, err := apiClient.Registries.Create(ctx, req)
		if err != nil {
			log.Fatal("Failed to create registry", "error", err)
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		successStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("2")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		labelStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("99"))

		valueStyle := lipgloss.NewStyle().
			Foreground(lipgloss.Color("252"))

		// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		fmt.Println(successStyle.Render("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"))
		fmt.Println()
		fmt.Printf("%s: %s\n", labelStyle.Render("ID –æ–ø–µ—Ä–∞—Ü–∏–∏"), valueStyle.Render(operation.ID))

		if operation.ResourceID != "" {
			fmt.Printf("%s: %s\n", labelStyle.Render("ID —Ä–µ–µ—Å—Ç—Ä–∞"), valueStyle.Render(operation.ResourceID))
		}

		if operation.ResourceName != "" {
			fmt.Printf("%s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(operation.ResourceName))
		}

		if operation.Description != "" {
			fmt.Printf("%s: %s\n", labelStyle.Render("–û–ø–∏—Å–∞–Ω–∏–µ"), valueStyle.Render(operation.Description))
		}

		fmt.Printf("%s: %s\n", labelStyle.Render("–°—Ç–∞—Ç—É—Å"), valueStyle.Render(func() string {
			if operation.Done {
				return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
			}
			return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
		}()))

		// –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
		fmt.Println()
		fmt.Println("üí° –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
		fmt.Println("  ai-agents-cli registry list")
		fmt.Println("  ai-agents-cli registry get <registry-id>")
	},
}

func init() {
	createCmd.Flags().StringVarP(&createName, "name", "n", "", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
	createCmd.Flags().StringVarP(&createType, "type", "t", "docker", "–¢–∏–ø —Ä–µ–µ—Å—Ç—Ä–∞ (docker, debian, rpm)")
	createCmd.Flags().BoolVar(&createIsPublic, "public", false, "–°–¥–µ–ª–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø—É–±–ª–∏—á–Ω—ã–º")
}
