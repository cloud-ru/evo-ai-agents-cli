package registry

import (
	"context"
	"fmt"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/api"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/di"
	"github.com/spf13/cobra"
)

var (
	getIdentifier string
)

// getCmd represents the get command
var getCmd = &cobra.Command{
	Use:   "get [registry-name-or-id]",
	Short: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–µ—Å—Ç—Ä–µ",
	Long:  "–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–µ—Å—Ç—Ä–µ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID",
	Args:  cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		ctx := context.Background()

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞
		identifier := getIdentifier
		if len(args) > 0 {
			identifier = args[0]
		}

		if identifier == "" {
			log.Fatal("Registry name or ID is required")
		}

		// –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		container := di.GetContainer()
		apiClient, err := container.GetAPI()
		if err != nil {
			log.Fatal("Failed to get API client", "error", err)
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–µ—Å—Ç—Ä–µ
		registry, err := apiClient.Registries.Get(ctx, identifier)
		if err != nil {
			log.Fatal("Failed to get registry", "error", err)
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		headerStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("205")).
			Border(lipgloss.RoundedBorder()).
			Padding(0, 1)

		labelStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("99"))

		valueStyle := lipgloss.NewStyle().
			Foreground(lipgloss.Color("252"))

		// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		fmt.Println(headerStyle.Render("üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–µ—Å—Ç—Ä–µ"))
		fmt.Println()
		fmt.Printf("%s: %s\n", labelStyle.Render("ID"), valueStyle.Render(registry.ID))
		fmt.Printf("%s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(registry.Name))
		fmt.Printf("%s: %s\n", labelStyle.Render("–¢–∏–ø"), valueStyle.Render(string(registry.RegistryType)))

		// –°—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–æ–π
		statusText := string(registry.Status)
		switch registry.Status {
		case api.RegistryStatusCreating:
			statusText = "üü° " + statusText
		case api.RegistryStatusActive:
			statusText = "üü¢ " + statusText
		case api.RegistryStatusError:
			statusText = "üî¥ " + statusText
		}
		fmt.Printf("%s: %s\n", labelStyle.Render("–°—Ç–∞—Ç—É—Å"), valueStyle.Render(statusText))

		fmt.Printf("%s: %s\n", labelStyle.Render("–ü—É–±–ª–∏—á–Ω—ã–π"), valueStyle.Render(func() string {
			if registry.IsPublic {
				return "–î–∞"
			}
			return "–ù–µ—Ç"
		}()))

		fmt.Printf("%s: %s\n", labelStyle.Render("–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞"), valueStyle.Render(string(registry.QuarantineMode)))
		fmt.Printf("%s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–Ω"), valueStyle.Render(registry.CreatedAt))

		if registry.RetentionPolicyIsEnabled {
			fmt.Printf("%s: %s\n", labelStyle.Render("–ü–æ–ª–∏—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"), valueStyle.Render("–í–∫–ª—é—á–µ–Ω–∞"))
			fmt.Printf("%s: %s\n", labelStyle.Render("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏"), valueStyle.Render(registry.RetentionPolicy))
		} else {
			fmt.Printf("%s: %s\n", labelStyle.Render("–ü–æ–ª–∏—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"), valueStyle.Render("–û—Ç–∫–ª—é—á–µ–Ω–∞"))
		}
	},
}

func init() {
	getCmd.Flags().StringVarP(&getIdentifier, "identifier", "i", "", "–ò–º—è –∏–ª–∏ ID —Ä–µ–µ—Å—Ç—Ä–∞")
}
