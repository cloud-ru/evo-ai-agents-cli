package cmd

import (
	"fmt"
	"os"

	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	authCmd "github.com/cloud-ru/evo-ai-agents-cli/cmd/auth"
	"github.com/cloud-ru/evo-ai-agents-cli/cmd/create"
	"github.com/spf13/cobra"
)

var (
	isVerbose bool
)

// RootCMD represents the base command when called without any subcommands
var RootCMD = &cobra.Command{
	Use:   "ai-agents-cli",
	Short: "CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI Agents –≤ –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Cloud.ru",
	Long: `AI Agents CLI - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AI –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Cloud.ru.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'validate' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–∏–ª–∏ '--help' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ verbose
		verbose, _ := cmd.Flags().GetBool("verbose")

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		logger := log.New(os.Stderr)
		logger.SetReportTimestamp(true)
		logger.SetReportCaller(true)

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		if verbose {
			logger.SetLevel(log.DebugLevel)
			logger.Info("–í–∫–ª—é—á–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
		} else {
			logger.SetLevel(log.InfoLevel)
		}

		log.SetDefault(logger)
		log.Debug("AI Agents CLI –∑–∞–ø—É—â–µ–Ω", "version", "1.0.0", "verbose", verbose)
	},
	Run: func(cmd *cobra.Command, args []string) {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π help –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
		if len(args) == 0 {
			log.Debug("–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
			showBeautifulHelp()
		}
	},
	Args: cobra.ArbitraryArgs,
}

func init() {
	RootCMD.PersistentFlags().
		BoolVarP(&isVerbose, "verbose", "v", false, "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞")

	// Set custom help function
	RootCMD.SetHelpFunc(func(cmd *cobra.Command, args []string) {
		showBeautifulHelp()
	})
	
	// Also set help template to override default
	RootCMD.SetHelpTemplate(`{{.UsageString}}`)

	// Add commands
	RootCMD.AddCommand(authCmd.RootCMD)
	RootCMD.AddCommand(create.RootCMD)
}

// showBeautifulHelp displays a beautifully formatted help message
func showBeautifulHelp() {
	// Define styles
	titleStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("#FF6B6B")).
		Margin(1, 0)

	subtitleStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#4ECDC4")).
		Bold(true).
		Margin(1, 0)

	descriptionStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#95A5A6")).
		Margin(0, 0, 1, 0)

	commandStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#3498DB")).
		Bold(true)

	descStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#7F8C8D")).
		Margin(0, 0, 0, 2)

	flagStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#E74C3C")).
		Bold(true)

	// Header
	header := titleStyle.Render("ü§ñ AI Agents CLI")
	subtitle := subtitleStyle.Render("–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ Cloud.ru")
	description := descriptionStyle.Render("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ AI –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥")

	// Commands section
	commandsTitle := subtitleStyle.Render("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	
	commands := []struct {
		name        string
		description string
	}{
		{"create", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ (agent, mcp)"},
		{"auth", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (login, logout, status)"},
		{"agents", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞–º–∏"},
		{"mcp-servers", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏"},
		{"system", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≥–µ–Ω—Ç–æ–≤"},
		{"ci", "CI/CD —Ñ—É–Ω–∫—Ü–∏–∏"},
		{"validate", "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"},
		{"completion", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"},
	}

	var commandsText string
	for _, cmd := range commands {
		commandsText += commandStyle.Render("  " + cmd.name) + "\n" +
			descStyle.Render("    " + cmd.description) + "\n"
	}

	// Flags section
	flagsTitle := subtitleStyle.Render("üö© –§–ª–∞–≥–∏:")
	flagsText := flagStyle.Render("  -v, --verbose") + "\n" +
		descStyle.Render("    –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞") + "\n" +
		flagStyle.Render("  -h, --help") + "\n" +
		descStyle.Render("    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")

	// Examples section
	examplesTitle := subtitleStyle.Render("üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
	examplesText := commandStyle.Render("  ai-agents-cli create agent my-agent") + "\n" +
		descStyle.Render("    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π AI –∞–≥–µ–Ω—Ç") + "\n" +
		commandStyle.Render("  ai-agents-cli auth login") + "\n" +
		descStyle.Render("    –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É") + "\n" +
		commandStyle.Render("  ai-agents-cli agents list") + "\n" +
		descStyle.Render("    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤")

	// Documentation
	docsTitle := subtitleStyle.Render("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
	docsText := descStyle.Render("  üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://cloud.ru/docs/ai-agents/ug/index?source-platform=Evolution")

	// Combine all parts
	helpText := fmt.Sprintf("%s\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s",
		header,
		subtitle,
		description,
		commandsTitle,
		commandsText,
		flagsTitle,
		flagsText,
		examplesTitle,
		examplesText,
		docsTitle,
		docsText,
	)

	fmt.Println(helpText)
}
