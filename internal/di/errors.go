package di

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/lipgloss"
)

// ErrorHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–≤–æ–¥–æ–º
type ErrorHandler struct{}

// NewErrorHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
func NewErrorHandler() *ErrorHandler {
	return &ErrorHandler{}
}

// HandleConfigError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (h *ErrorHandler) HandleConfigError(err error) error {
	if err == nil {
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if strings.Contains(err.Error(), "environment variable is required") {
		return h.formatEnvironmentError(err)
	}

	return h.formatGenericError("Configuration", err)
}

// HandleAuthError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (h *ErrorHandler) HandleAuthError(err error) error {
	if err == nil {
		return nil
	}

	return h.formatGenericError("Authentication", err)
}

// HandleAPIError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API
func (h *ErrorHandler) HandleAPIError(err error) error {
	if err == nil {
		return nil
	}

	return h.formatGenericError("API Client", err)
}

// formatEnvironmentError —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func (h *ErrorHandler) formatEnvironmentError(err error) error {
	errorStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("1")).
		Border(lipgloss.RoundedBorder()).
		Padding(1, 2)

	titleStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("3")).
		MarginBottom(1)

	helpStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("8")).
		MarginTop(1)

	title := titleStyle.Render("üîß Configuration Error")
	message := errorStyle.Render(err.Error())

	help := helpStyle.Render(`
–î–ª—è —Ä–∞–±–æ—Ç—ã CLI –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:

1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:
   cp env.example .env

2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
   IAM_KEY_ID=your_iam_key_id
   IAM_SECRET=your_iam_secret
   PROJECT_ID=your_project_id
   CUSTOMER_ID=your_customer_id

3. –ò–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏:
   export IAM_KEY_ID=your_iam_key_id
   export IAM_SECRET=your_iam_secret
   export PROJECT_ID=your_project_id
   export CUSTOMER_ID=your_customer_id

4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
   ai-agents-cli --help
`)

	return fmt.Errorf("%s\n\n%s\n\n%s", title, message, help)
}

// formatGenericError —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –æ—à–∏–±–∫–∏
func (h *ErrorHandler) formatGenericError(service string, err error) error {
	errorStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("1")).
		Border(lipgloss.RoundedBorder()).
		Padding(1, 2)

	titleStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("3")).
		MarginBottom(1)

	title := titleStyle.Render(fmt.Sprintf("‚ùå %s Error", service))
	message := errorStyle.Render(err.Error())

	return fmt.Errorf("%s\n\n%s", title, message)
}

// HandleContainerError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
func (h *ErrorHandler) HandleContainerError(err error) error {
	if err == nil {
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
	if strings.Contains(err.Error(), "environment variable is required") {
		return h.HandleConfigError(err)
	}

	if strings.Contains(err.Error(), "auth") || strings.Contains(err.Error(), "IAM") {
		return h.HandleAuthError(err)
	}

	if strings.Contains(err.Error(), "API") {
		return h.HandleAPIError(err)
	}

	return h.formatGenericError("Container", err)
}
