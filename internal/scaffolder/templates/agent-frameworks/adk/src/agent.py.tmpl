"""
{{.ProjectName}} - AI Agent using ADK Framework

Этот модуль содержит основной агент, созданный с использованием ADK (Agent Development Kit).
"""

import asyncio
import logging
from typing import Any, Dict, List, Optional

from adk import Agent, AgentConfig, AgentContext
from adk.handlers import MessageHandler, CommandHandler
from adk.tools import ToolRegistry
from adk.monitoring import MetricsCollector

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class {{.ProjectName}}Agent(Agent):
    """
    {{.ProjectName}} AI Agent
    
    Основной агент для {{.Description}}
    """
    
    def __init__(self, config: AgentConfig):
        super().__init__(config)
        self.tool_registry = ToolRegistry()
        self.metrics = MetricsCollector()
        self._setup_handlers()
        self._setup_tools()
    
    def _setup_handlers(self):
        """Настройка обработчиков сообщений"""
        self.add_handler(MessageHandler(self.handle_message))
        self.add_handler(CommandHandler(self.handle_command))
    
    def _setup_tools(self):
        """Настройка инструментов агента"""
        # Добавьте здесь ваши инструменты
        pass
    
    async def handle_message(self, context: AgentContext, message: str) -> str:
        """
        Обработка входящих сообщений
        
        Args:
            context: Контекст агента
            message: Входящее сообщение
            
        Returns:
            Ответ агента
        """
        try:
            # Логирование входящего сообщения
            logger.info(f"Получено сообщение: {message}")
            
            # Сбор метрик
            self.metrics.increment("messages_received")
            
            # Обработка сообщения
            response = await self._process_message(message, context)
            
            # Логирование ответа
            logger.info(f"Отправлен ответ: {response}")
            
            return response
            
        except Exception as e:
            logger.error(f"Ошибка при обработке сообщения: {e}")
            self.metrics.increment("errors")
            return "Извините, произошла ошибка при обработке вашего запроса."
    
    async def handle_command(self, context: AgentContext, command: str, args: List[str]) -> str:
        """
        Обработка команд
        
        Args:
            context: Контекст агента
            command: Команда
            args: Аргументы команды
            
        Returns:
            Результат выполнения команды
        """
        try:
            logger.info(f"Выполнение команды: {command} с аргументами: {args}")
            
            if command == "help":
                return self._get_help()
            elif command == "status":
                return await self._get_status()
            elif command == "metrics":
                return await self._get_metrics()
            else:
                return f"Неизвестная команда: {command}"
                
        except Exception as e:
            logger.error(f"Ошибка при выполнении команды: {e}")
            return f"Ошибка при выполнении команды: {e}"
    
    async def _process_message(self, message: str, context: AgentContext) -> str:
        """
        Основная логика обработки сообщений
        
        Args:
            message: Входящее сообщение
            context: Контекст агента
            
        Returns:
            Обработанный ответ
        """
        # Здесь должна быть основная логика вашего агента
        # Например, интеграция с LLM, обработка естественного языка и т.д.
        
        # Пример простой обработки
        if "привет" in message.lower():
            return "Привет! Я {{.ProjectName}} агент. Чем могу помочь?"
        elif "помощь" in message.lower():
            return self._get_help()
        else:
            return f"Я получил ваше сообщение: '{message}'. Как я могу помочь?"
    
    def _get_help(self) -> str:
        """Получить справку по командам"""
        return """
Доступные команды:
- help - показать эту справку
- status - показать статус агента
- metrics - показать метрики

Доступные функции:
- Обработка текстовых сообщений
- Выполнение команд
- Сбор метрик и мониторинг
"""
    
    async def _get_status(self) -> str:
        """Получить статус агента"""
        return f"""
Статус агента {{.ProjectName}}:
- Статус: Активен
- Обработано сообщений: {self.metrics.get_counter('messages_received')}
- Ошибок: {self.metrics.get_counter('errors')}
- Время работы: {self.metrics.get_uptime()}
"""
    
    async def _get_metrics(self) -> str:
        """Получить метрики агента"""
        metrics = self.metrics.get_all_metrics()
        return f"""
Метрики агента {{.ProjectName}}:
{metrics}
"""
    
    async def start(self):
        """Запуск агента"""
        logger.info(f"Запуск агента {{.ProjectName}}")
        await super().start()
        logger.info("Агент успешно запущен")
    
    async def stop(self):
        """Остановка агента"""
        logger.info(f"Остановка агента {{.ProjectName}}")
        await super().stop()
        logger.info("Агент остановлен")


async def main():
    """Основная функция для запуска агента"""
    # Конфигурация агента
    config = AgentConfig(
        name="{{.ProjectName}}",
        description="{{.Description}}",
        version="1.0.0",
        host="0.0.0.0",
        port=8000,
        debug=True
    )
    
    # Создание и запуск агента
    agent = {{.ProjectName}}Agent(config)
    
    try:
        await agent.start()
        logger.info("Агент запущен. Нажмите Ctrl+C для остановки.")
        
        # Ожидание сигнала остановки
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("Получен сигнал остановки")
    finally:
        await agent.stop()


if __name__ == "__main__":
    asyncio.run(main())
