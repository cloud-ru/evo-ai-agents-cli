"""
{{.ProjectName}} - AI Agent using LangGraph Framework

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph.
"""

import asyncio
import logging
from typing import Any, Dict, List, Optional, TypedDict

from langgraph import StateGraph, END
from langgraph.graph import StateGraph, END
from langchain_core.messages import BaseMessage, HumanMessage, AIMessage
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AgentState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    messages: List[BaseMessage]
    user_input: str
    agent_response: str
    context: Dict[str, Any]
    step_count: int


class {{.ProjectName}}Agent:
    """
    {{.ProjectName}} AI Agent using LangGraph
    
    –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è {{.Description}}
    """
    
    def __init__(self):
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.7,
            max_tokens=1000
        )
        self.graph = self._build_graph()
        self.app = self.graph.compile()
    
    def _build_graph(self) -> StateGraph:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∞–≥–µ–Ω—Ç–∞"""
        graph = StateGraph(AgentState)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤
        graph.add_node("receive_input", self._receive_input)
        graph.add_node("process_message", self._process_message)
        graph.add_node("generate_response", self._generate_response)
        graph.add_node("update_context", self._update_context)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
        graph.add_edge("receive_input", "process_message")
        graph.add_edge("process_message", "generate_response")
        graph.add_edge("generate_response", "update_context")
        graph.add_edge("update_context", END)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        graph.set_entry_point("receive_input")
        
        return graph
    
    def _receive_input(self, state: AgentState) -> AgentState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {state['user_input']}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state["messages"].append(HumanMessage(content=state["user_input"]))
        state["step_count"] = state.get("step_count", 0) + 1
        
        return state
    
    def _process_message(self, state: AgentState) -> AgentState:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        user_input = state["user_input"]
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if "–ø—Ä–∏–≤–µ—Ç" in user_input.lower():
            state["context"]["greeting"] = True
        elif "–ø–æ–º–æ—â—å" in user_input.lower():
            state["context"]["help_requested"] = True
        else:
            state["context"]["general_query"] = True
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {state['context']}")
        return state
    
    def _generate_response(self, state: AgentState) -> AgentState:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            prompt = ChatPromptTemplate.from_messages([
                ("system", self._get_system_prompt()),
                ("human", "{user_input}")
            ])
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            chain = prompt | self.llm
            response = chain.invoke({"user_input": state["user_input"]})
            
            state["agent_response"] = response.content
            state["messages"].append(AIMessage(content=response.content))
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {response.content}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            state["agent_response"] = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        
        return state
    
    def _update_context(self, state: AgentState) -> AgentState:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
        state["context"]["last_response"] = state["agent_response"]
        state["context"]["conversation_length"] = len(state["messages"])
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {state['context']}")
        return state
    
    def _get_system_prompt(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        return f"""
–¢—ã {{.ProjectName}} - AI –∞–≥–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: {{{{.Description}}}}

–¢—ã –¥–æ–ª–∂–µ–Ω:
1. –ë—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
2. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
4. –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â—å, –ø–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
    
    async def process_message(self, user_input: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_input: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            initial_state = AgentState(
                messages=[],
                user_input=user_input,
                agent_response="",
                context={},
                step_count=0
            )
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
            result = await self.app.ainvoke(initial_state)
            
            return result["agent_response"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    
    async def get_help(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        return """
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ {{.ProjectName}} –∞–≥–µ–Ω—Ç–∞:

ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

üí¨ –ö–æ–º–∞–Ω–¥—ã:
- "–ø—Ä–∏–≤–µ—Ç" - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
- "–ø–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
- –õ—é–±–æ–π –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –§—Ä–µ–π–º–≤–æ—Ä–∫: LangGraph
- LLM: GPT-4
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        return {
            "agent_name": "{{.ProjectName}}",
            "framework": "LangGraph",
            "status": "–ê–∫—Ç–∏–≤–µ–Ω",
            "llm_model": "gpt-4",
            "capabilities": [
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤",
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º",
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
            ]
        }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    agent = {{.ProjectName}}Agent()
    
    print("ü§ñ {{.ProjectName}} Agent –∑–∞–ø—É—â–µ–Ω!")
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("–í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    print("-" * 50)
    
    while True:
        try:
            user_input = input("\nüë§ –í—ã: ")
            
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif user_input.lower() in ['–ø–æ–º–æ—â—å', 'help']:
                help_text = await agent.get_help()
                print(f"\nü§ñ –ê–≥–µ–Ω—Ç:\n{help_text}")
            else:
                response = await agent.process_message(user_input)
                print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {response}")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
