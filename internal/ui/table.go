package ui

import (
	"context"
	"fmt"
	"os"
	"strings"

	"github.com/charmbracelet/bubbles/table"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/charmbracelet/log"
	"github.com/cloudru/ai-agents-cli/internal/api"
	"github.com/cloudru/ai-agents-cli/internal/di"
)

// TableInterface –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
type TableInterface interface {
	View() string
	Update(msg tea.Msg) (tea.Model, tea.Cmd)
	Init() tea.Cmd
	GetSelectedRow() table.Row
}

// TableProgram –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
type TableProgram struct {
	table         TableInterface
	showDetails   bool
	selectedAgent *api.Agent
}

// NewTableProgram —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç–∞–±–ª–∏—Ü—ã
func NewTableProgram(table TableInterface) *TableProgram {
	return &TableProgram{
		table:         table,
		showDetails:   false,
		selectedAgent: nil,
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç–∞–±–ª–∏—Ü—ã
func (p *TableProgram) Run() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
	if !isInteractive() {
		// –ï—Å–ª–∏ –Ω–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ —Ç–µ–∫—Å—Ç
		fmt.Println(p.table.View())
		return nil
	}

	program := tea.NewProgram(p)
	if _, err := program.Run(); err != nil {
		return err
	}
	return nil
}

// isInteractive –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
func isInteractive() bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stdout –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É
	return isTerminal()
}

// isTerminal –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
func isTerminal() bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stdout –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É
	fileInfo, err := os.Stdout.Stat()
	if err != nil {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (—Ç–µ—Ä–º–∏–Ω–∞–ª)
	return (fileInfo.Mode() & os.ModeCharDevice) != 0
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É
func (p *TableProgram) Init() tea.Cmd {
	return nil
}

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É
func (p *TableProgram) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "q", "ctrl+c", "esc":
			if p.showDetails {
				p.showDetails = false
				p.selectedAgent = nil
				return p, nil
			}
			return p, tea.Quit
		case "enter":
			if !p.showDetails {
				// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
				selectedRow := p.table.GetSelectedRow()
				if len(selectedRow) > 0 {
					agentID := selectedRow[0] // ID –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

					// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ —á–µ—Ä–µ–∑ API
					ctx := context.Background()
					container := di.GetContainer()
					apiClient := container.GetAPI()

					agent, err := apiClient.Agents.Get(ctx, agentID)
					if err != nil {
						log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ", "error", err, "agent_id", agentID)
						return p, nil
					}

					p.selectedAgent = agent
					p.showDetails = true
					log.Debug("–í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç", "agent_id", agentID)
				}
				return p, nil
			}
		case "backspace", "b":
			if p.showDetails {
				p.showDetails = false
				p.selectedAgent = nil
				return p, nil
			}
		}
	}

	var cmd tea.Cmd
	updatedTable, cmd := p.table.Update(msg)
	if tableInterface, ok := updatedTable.(TableInterface); ok {
		p.table = tableInterface
	}
	return p, cmd
}

// View –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É
func (p *TableProgram) View() string {
	if p.showDetails {
		return p.renderDetails()
	}
	return p.table.View()
}

// renderDetails –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
func (p *TableProgram) renderDetails() string {
	if p.selectedAgent == nil {
		return "–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
	ctx := context.Background()
	container := di.GetContainer()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
	result := RenderAgentDetails(p.selectedAgent, ctx, container)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
	result += fmt.Sprintf("\n\n%s", lipgloss.NewStyle().Foreground(lipgloss.Color("240")).Render("–ù–∞–∂–º–∏—Ç–µ 'b' –∏–ª–∏ 'Backspace' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ"))

	return result
}

// ShowAgentsTable –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞–≥–µ–Ω—Ç–æ–≤
func ShowAgentsTable(agents []api.Agent, title string) error {
	table := CreateAgentsTable(agents, title)
	program := NewTableProgram(table)
	return program.Run()
}

// ShowMCPServersTable –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
func ShowMCPServersTable(servers []api.MCPServer, title string) error {
	table := CreateMCPServersTable(servers, title)
	program := NewTableProgram(table)
	return program.Run()
}

// ShowAgentsListFromAPI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ API
func ShowAgentsListFromAPI(ctx context.Context, limit, offset int) error {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	// –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	dataLoader := func(ctx context.Context, limit, offset int) ([]table.Row, int, error) {
		log.Debug("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤", "limit", limit, "offset", offset)

		agents, err := apiClient.Agents.List(ctx, limit, offset)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤", "error", err)
			return nil, 0, fmt.Errorf("failed to list agents: %w", err)
		}

		log.Debug("–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω", "total", agents.Total, "count", len(agents.Data))

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
		var rows []table.Row
		for _, agent := range agents.Data {
			// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
			agentType := FormatAgentType(agent.AgentType)

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ (–±–µ–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤)
			createdByInfo := agent.CreatedBy
			updatedByInfo := agent.UpdatedBy

			rows = append(rows, table.Row{
				agent.ID,
				agent.Name,
				FormatStatus(agent.Status),
				agentType,
				createdByInfo,
				updatedByInfo,
				agent.CreatedAt.Time.Format("02.01.2006 15:04"),
				agent.UpdatedAt.Time.Format("02.01.2006 15:04"),
			})
		}

		return rows, agents.Total, nil
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	columns := []table.Column{
		{Title: "ID", Width: 200},
		{Title: "–ù–∞–∑–≤–∞–Ω–∏–µ", Width: 100},
		{Title: "–°—Ç–∞—Ç—É—Å", Width: 25},
		{Title: "–¢–∏–ø", Width: 50},
		{Title: "–°–æ–∑–¥–∞–ª", Width: 200},
		{Title: "–ò–∑–º–µ–Ω–∏–ª", Width: 200},
		{Title: "–°–æ–∑–¥–∞–Ω", Width: 16},
		{Title: "–û–±–Ω–æ–≤–ª–µ–Ω", Width: 16},
	}

	// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
	tableModel := NewServerPaginatedTableModel(ctx, "ü§ñ –ê–≥–µ–Ω—Ç—ã", columns, limit, dataLoader)

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç–∞–±–ª–∏—Ü—ã
	program := NewTableProgram(tableModel)
	return program.Run()
}

// ShowMCPServersListFromAPI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ API
func ShowMCPServersListFromAPI(ctx context.Context, limit, offset int) error {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	log.Debug("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤", "limit", limit, "offset", offset)

	servers, err := apiClient.MCPServers.List(ctx, limit, offset)
	if err != nil {
		log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤", "error", err)
		return fmt.Errorf("failed to list MCP servers: %w", err)
	}

	log.Debug("–°–ø–∏—Å–æ–∫ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω", "total", servers.Total, "count", len(servers.Data))

	title := fmt.Sprintf("üìã MCP –°–µ—Ä–≤–µ—Ä—ã (–≤—Å–µ–≥–æ: %d)", servers.Total)
	return ShowMCPServersTable(servers.Data, title)
}

// ShowAgentSystemsListFromAPI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ API
func ShowAgentSystemsListFromAPI(ctx context.Context, limit, offset int) error {
	container := di.GetContainer()
	apiClient := container.GetAPI()

	// –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	dataLoader := func(ctx context.Context, limit, offset int) ([]table.Row, int, error) {
		log.Debug("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∞–≥–µ–Ω—Ç–æ–≤", "limit", limit, "offset", offset)

		systems, err := apiClient.AgentSystems.List(ctx, limit, offset)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º –∞–≥–µ–Ω—Ç–æ–≤", "error", err)
			return nil, 0, fmt.Errorf("failed to list agent systems: %w", err)
		}

		log.Debug("–°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω", "total", systems.Total, "count", len(systems.Data))

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
		var rows []table.Row
		for _, system := range systems.Data {
			rows = append(rows, table.Row{
				system.ID,
				system.Name,
				FormatStatus(system.Status),
				fmt.Sprintf("%d", len(system.Agents)),
				system.CreatedAt.Format("02.01.2006 15:04"),
				system.UpdatedAt.Format("02.01.2006 15:04"),
			})
		}

		return rows, systems.Total, nil
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	columns := []table.Column{
		{Title: "ID", Width: 40},
		{Title: "–ù–∞–∑–≤–∞–Ω–∏–µ", Width: 50},
		{Title: "–°—Ç–∞—Ç—É—Å", Width: 25},
		{Title: "–ê–≥–µ–Ω—Ç–æ–≤", Width: 10},
		{Title: "–°–æ–∑–¥–∞–Ω–∞", Width: 16},
		{Title: "–û–±–Ω–æ–≤–ª–µ–Ω–∞", Width: 16},
	}

	// –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
	tableModel := NewServerPaginatedTableModel(ctx, "üè¢ –°–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤", columns, limit, dataLoader)

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç–∞–±–ª–∏—Ü—ã
	program := NewTableProgram(tableModel)
	return program.Run()
}

// CheckTerminalSize –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
func CheckTerminalSize() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
	width, height := 80, 24 // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å termenv –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
	if width < 80 || height < 24 {
		return fmt.Errorf("—Ç–µ—Ä–º–∏–Ω–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x24")
	}

	return nil
}

// getCreatedByInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
func getCreatedByInfo(ctx context.Context, container *di.Container, userID string) string {
	if userID == "" {
		return "–ù–µ —É–∫–∞–∑–∞–Ω"
	}

	config := container.GetConfig()
	if config.CustomerID == "" {
		return fmt.Sprintf("ID: %s", userID)
	}

	apiClient := container.GetAPI()
	user, err := apiClient.Users.Get(ctx, config.CustomerID, userID)
	if err != nil {
		return fmt.Sprintf("ID: %s", userID)
	}

	return FormatUserName(user.ID, user.FirstName, user.LastName, user.Email)
}

// getUpdatedByInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω—è—é—â–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
func getUpdatedByInfo(ctx context.Context, container *di.Container, userID string) string {
	if userID == "" {
		return "–ù–µ —É–∫–∞–∑–∞–Ω"
	}

	config := container.GetConfig()
	if config.CustomerID == "" {
		return fmt.Sprintf("ID: %s", userID)
	}

	apiClient := container.GetAPI()
	user, err := apiClient.Users.Get(ctx, config.CustomerID, userID)
	if err != nil {
		return fmt.Sprintf("ID: %s", userID)
	}

	return FormatUserName(user.ID, user.FirstName, user.LastName, user.Email)
}

// RenderAgentDetails –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
func RenderAgentDetails(agent *api.Agent, ctx context.Context, container *di.Container) string {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("205")).
		Border(lipgloss.RoundedBorder()).
		Padding(0, 1).
		Margin(0, 0, 1, 0)

	labelStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39"))

	valueStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("252"))

	sectionStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("214")).
		Margin(1, 0)

	tabStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("214")).
		Margin(0, 0, 0, 2)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
	createdByInfo := getCreatedByInfoForUI(ctx, container, agent.CreatedBy)
	updatedByInfo := getUpdatedByInfoForUI(ctx, container, agent.UpdatedBy)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result := headerStyle.Render("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ")
	result += "\n\n"

	// ===== –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
	result += sectionStyle.Render("üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
	result += "\n"

	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("ID"), valueStyle.Render(agent.ID))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(agent.Name))

	if agent.ProjectID != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("Project ID"), valueStyle.Render(agent.ProjectID))
	}

	if agent.Description != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–û–ø–∏—Å–∞–Ω–∏–µ"), valueStyle.Render(agent.Description))
	}

	// –¢–∏–ø –∞–≥–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
	agentType := FormatAgentType(agent.AgentType)
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–¢–∏–ø"), valueStyle.Render(agentType))

	// –°—Ç–∞—Ç—É—Å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	status := FormatStatus(agent.Status)
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°—Ç–∞—Ç—É—Å"), status)

	// –ü—Ä–∏—á–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
	if agent.StatusReason.ReasonType != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ü—Ä–∏—á–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞"), valueStyle.Render(agent.StatusReason.ReasonType))
		if agent.StatusReason.Message != "" {
			result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°–æ–æ–±—â–µ–Ω–∏–µ"), valueStyle.Render(agent.StatusReason.Message))
		}
		if agent.StatusReason.Key != "" {
			result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ö–ª—é—á"), valueStyle.Render(agent.StatusReason.Key))
		}
	}

	// –î–∞—Ç—ã –∏ –∞–≤—Ç–æ—Ä—ã
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–Ω"), valueStyle.Render(agent.CreatedAt.Time.Format("02.01.2006 15:04:05")))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–ª"), valueStyle.Render(createdByInfo))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–û–±–Ω–æ–≤–ª–µ–Ω"), valueStyle.Render(agent.UpdatedAt.Time.Format("02.01.2006 15:04:05")))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ò–∑–º–µ–Ω–∏–ª"), valueStyle.Render(updatedByInfo))

	// URLs
	if agent.PublicURL != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ü—É–±–ª–∏—á–Ω—ã–π URL"), valueStyle.Render(agent.PublicURL))
	}
	if agent.ArizePhoenixPublicURL != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("Arize Phoenix URL"), valueStyle.Render(agent.ArizePhoenixPublicURL))
	}

	// ===== MCP –°–ï–†–í–ï–†–ê =====
	result += fmt.Sprintf("\n%s\n", sectionStyle.Render("üîå MCP –°–ï–†–í–ï–†–ê"))

	// MCP —Å–µ—Ä–≤–µ—Ä—ã (–Ω–æ–≤—ã–µ)
	if len(agent.MCPServers) > 0 {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:"))
		for i, mcp := range agent.MCPServers {
			result += fmt.Sprintf("  %d. %s (%s) - %s\n", i+1, mcp.Name, mcp.ID, mcp.Status)
			if mcp.Source != nil && len(mcp.Source) > 0 {
				for key, value := range mcp.Source {
					result += fmt.Sprintf("     %s: %v\n", labelStyle.Render("–ò—Å—Ç–æ—á–Ω–∏–∫"), valueStyle.Render(fmt.Sprintf("%s: %v", key, value)))
				}
			}
			if len(mcp.Tools) > 0 {
				result += fmt.Sprintf("     %s (%d):\n", labelStyle.Render("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"), len(mcp.Tools))
				for j, tool := range mcp.Tools {
					result += fmt.Sprintf("       %d. %s\n", j+1, tool.Name)
					if tool.Description != "" {
						// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
						desc := tool.Description
						if len(desc) > 100 {
							desc = desc[:100] + "..."
						}
						result += fmt.Sprintf("          %s\n", valueStyle.Render(desc))
					}
					result += fmt.Sprintf("          %s: %d\n", labelStyle.Render("–ê—Ä–≥—É–º–µ–Ω—Ç—ã"), len(tool.Args))
				}
			}
		}
	} else {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("‚ùå MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"))
	}

	// MCP —Å–µ—Ä–≤–µ—Ä—ã (—Å—Ç–∞—Ä—ã–µ)
	if len(agent.MCPs) > 0 {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üì° –°—Ç–∞—Ä—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã:"))
		for i, mcp := range agent.MCPs {
			result += fmt.Sprintf("  %d. %s\n", i+1, mcp)
		}
	}

	// ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò =====
	result += fmt.Sprintf("\n%s\n", sectionStyle.Render("‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò"))

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"))
	mcpCount := len(agent.MCPServers)
	if len(agent.MCPs) > 0 {
		mcpCount = len(agent.MCPs)
	}
	result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"), mcpCount)
	result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("–û–ø—Ü–∏–π"), len(agent.Options))
	result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"), len(agent.IntegrationOptions))
	if len(agent.UsedInAgentSystems) > 0 {
		result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ö"), len(agent.UsedInAgentSystems))
	}

	// –¢–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞
	if agent.InstanceType.ID != "" {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üíª –¢–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞:"))
		result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("ID"), valueStyle.Render(agent.InstanceType.ID))
		result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(agent.InstanceType.Name))
		if agent.InstanceType.SKUCode != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("SKU –∫–æ–¥"), valueStyle.Render(agent.InstanceType.SKUCode))
		}
		if agent.InstanceType.ResourceCode != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ö–æ–¥ —Ä–µ—Å—É—Ä—Å–∞"), valueStyle.Render(agent.InstanceType.ResourceCode))
		}
		result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ê–∫—Ç–∏–≤–µ–Ω"), valueStyle.Render(fmt.Sprintf("%t", agent.InstanceType.IsActive)))
		if agent.InstanceType.MCPU > 0 {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("CPU"), valueStyle.Render(fmt.Sprintf("%d –ºCPU", agent.InstanceType.MCPU)))
		}
		if agent.InstanceType.MibRAM > 0 {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("RAM"), valueStyle.Render(fmt.Sprintf("%d –ú–ë", agent.InstanceType.MibRAM)))
		}
		if agent.InstanceType.CreatedAt != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–Ω"), valueStyle.Render(agent.InstanceType.CreatedAt))
		}
		if agent.InstanceType.UpdatedAt != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–û–±–Ω–æ–≤–ª–µ–Ω"), valueStyle.Render(agent.InstanceType.UpdatedAt))
		}
		if agent.InstanceType.CreatedBy != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–ª"), valueStyle.Render(agent.InstanceType.CreatedBy))
		}
		if agent.InstanceType.UpdatedBy != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ò–∑–º–µ–Ω–∏–ª"), valueStyle.Render(agent.InstanceType.UpdatedBy))
		}
	}

	// System Prompt –∏–∑ Options
	if systemPrompt, ok := agent.Options["systemPrompt"]; ok {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìù System Prompt:"))
		result += fmt.Sprintf("  %s\n", valueStyle.Render(fmt.Sprintf("%v", systemPrompt)))
	}

	// LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Options
	if llm, ok := agent.Options["llm"]; ok {
		if llmMap, ok := llm.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üß† LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"))
			if foundationModels, ok := llmMap["foundationModels"]; ok {
				if fmMap, ok := foundationModels.(map[string]interface{}); ok {
					if modelName, ok := fmMap["modelName"]; ok {
						result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ú–æ–¥–µ–ª—å"), valueStyle.Render(fmt.Sprintf("%v", modelName)))
					}
					if gcInstanceId, ok := fmMap["gcInstanceId"]; ok {
						result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("GC Instance ID"), valueStyle.Render(fmt.Sprintf("%v", gcInstanceId)))
					}
				}
			}
		}
	}

	// Scaling –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Options
	if scaling, ok := agent.Options["scaling"]; ok {
		if scalingMap, ok := scaling.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìà Scaling –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"))
			if minScale, ok := scalingMap["minScale"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Min Scale"), valueStyle.Render(fmt.Sprintf("%v", minScale)))
			}
			if maxScale, ok := scalingMap["maxScale"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Max Scale"), valueStyle.Render(fmt.Sprintf("%v", maxScale)))
			}
			if isKeepAlive, ok := scalingMap["isKeepAlive"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Keep Alive"), valueStyle.Render(fmt.Sprintf("%v", isKeepAlive)))
			}
			if keepAliveDuration, ok := scalingMap["keepAliveDuration"]; ok {
				if durationMap, ok := keepAliveDuration.(map[string]interface{}); ok {
					hours := durationMap["hours"]
					minutes := durationMap["minutes"]
					seconds := durationMap["seconds"]
					result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Keep Alive Duration"), valueStyle.Render(fmt.Sprintf("%vh %vm %vs", hours, minutes, seconds)))
				}
			}
		}
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑ IntegrationOptions
	if authOptions, ok := agent.IntegrationOptions["authOptions"]; ok {
		if authMap, ok := authOptions.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:"))
			if isEnabled, ok := authMap["isEnabled"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–í–∫–ª—é—á–µ–Ω–∞"), valueStyle.Render(fmt.Sprintf("%v", isEnabled)))
			}
			if authType, ok := authMap["type"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–¢–∏–ø"), valueStyle.Render(fmt.Sprintf("%v", authType)))
			}
			if serviceAccountId, ok := authMap["serviceAccountId"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Service Account ID"), valueStyle.Render(fmt.Sprintf("%v", serviceAccountId)))
			}
		}
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ IntegrationOptions
	if logging, ok := agent.IntegrationOptions["logging"]; ok {
		if loggingMap, ok := logging.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:"))
			if isEnabled, ok := loggingMap["isEnabledLogging"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–í–∫–ª—é—á–µ–Ω–æ"), valueStyle.Render(fmt.Sprintf("%v", isEnabled)))
			}
			if logGroupId, ok := loggingMap["logGroupId"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Log Group ID"), valueStyle.Render(fmt.Sprintf("%v", logGroupId)))
			}
		}
	}

	// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ IntegrationOptions
	if autoUpdate, ok := agent.IntegrationOptions["autoUpdateOptions"]; ok {
		if autoUpdateMap, ok := autoUpdate.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:"))
			if isEnabled, ok := autoUpdateMap["isEnabled"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–í–∫–ª—é—á–µ–Ω–æ"), valueStyle.Render(fmt.Sprintf("%v", isEnabled)))
			}
		}
	}

	// –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑–∞
	if agent.ImageSource != nil {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üê≥ –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑–∞:"))
		for key, value := range agent.ImageSource {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render(key), valueStyle.Render(fmt.Sprintf("%v", value)))
		}
	}

	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if len(agent.IntegrationOptions) > 0 {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"))
		for key, value := range agent.IntegrationOptions {
			result += fmt.Sprintf("  %s: %v\n", labelStyle.Render(key), valueStyle.Render(fmt.Sprintf("%v", value)))
		}
	}

	// –û–ø—Ü–∏–∏
	if len(agent.Options) > 0 {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("‚öôÔ∏è –û–ø—Ü–∏–∏:"))
		for key, value := range agent.Options {
			result += fmt.Sprintf("  %s: %v\n", labelStyle.Render(key), valueStyle.Render(fmt.Sprintf("%v", value)))
		}
	}

	return result
}

// getCreatedByInfoForUI –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è UI
func getCreatedByInfoForUI(ctx context.Context, container *di.Container, userID string) string {
	if userID == "" {
		return "–ù–µ —É–∫–∞–∑–∞–Ω"
	}

	config := container.GetConfig()
	if config.CustomerID == "" {
		return fmt.Sprintf("ID: %s", userID)
	}

	apiClient := container.GetAPI()
	user, err := apiClient.Users.Get(ctx, config.CustomerID, userID)
	if err != nil {
		return fmt.Sprintf("ID: %s", userID)
	}

	return FormatUserName(user.ID, user.FirstName, user.LastName, user.Email)
}

// getUpdatedByInfoForUI –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω—è—é—â–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è UI
func getUpdatedByInfoForUI(ctx context.Context, container *di.Container, userID string) string {
	if userID == "" {
		return "–ù–µ —É–∫–∞–∑–∞–Ω"
	}

	config := container.GetConfig()
	if config.CustomerID == "" {
		return fmt.Sprintf("ID: %s", userID)
	}

	apiClient := container.GetAPI()
	user, err := apiClient.Users.Get(ctx, config.CustomerID, userID)
	if err != nil {
		return fmt.Sprintf("ID: %s", userID)
	}

	return FormatUserName(user.ID, user.FirstName, user.LastName, user.Email)
}

// FormatAgentType —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
func FormatAgentType(agentType string) string {
	if agentType == "" {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}

	// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
	typeTranslations := map[string]string{
		"AGENT_TYPE_FROM_HUB":        "–ò–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
		"AGENT_TYPE_CUSTOM":          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
		"AGENT_TYPE_PREDEFINED":      "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π",
		"AGENT_TYPE_TEMPLATE":        "–®–∞–±–ª–æ–Ω",
		"AGENT_TYPE_WORKFLOW":        "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å",
		"AGENT_TYPE_INTEGRATION":     "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
		"AGENT_TYPE_ANALYTICS":       "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
		"AGENT_TYPE_AUTOMATION":      "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
		"AGENT_TYPE_CHAT":            "–ß–∞—Ç-–±–æ—Ç",
		"AGENT_TYPE_ASSISTANT":       "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
		"AGENT_TYPE_WORKER":          "–†–∞–±–æ—Ç–Ω–∏–∫",
		"AGENT_TYPE_ANALYZER":        "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
		"AGENT_TYPE_GENERATOR":       "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
		"AGENT_TYPE_CLASSIFIER":      "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
		"AGENT_TYPE_TRANSLATOR":      "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
		"AGENT_TYPE_SUMMARIZER":      "–°—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä",
		"AGENT_TYPE_EXTRACTOR":       "–ò–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å",
		"AGENT_TYPE_VALIDATOR":       "–í–∞–ª–∏–¥–∞—Ç–æ—Ä",
		"AGENT_TYPE_OPTIMIZER":       "–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä",
		"AGENT_TYPE_MONITOR":         "–ú–æ–Ω–∏—Ç–æ—Ä",
		"AGENT_TYPE_SCHEDULER":       "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
		"AGENT_TYPE_ROUTER":          "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä",
		"AGENT_TYPE_AGGREGATOR":      "–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä",
		"AGENT_TYPE_FILTER":          "–§–∏–ª—å—Ç—Ä",
		"AGENT_TYPE_TRANSFORMER":     "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä",
		"AGENT_TYPE_ENRICHER":        "–û–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å",
		"AGENT_TYPE_NOTIFIER":        "–£–≤–µ–¥–æ–º–∏—Ç–µ–ª—å",
		"AGENT_TYPE_ARCHIVER":        "–ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä",
		"AGENT_TYPE_BACKUP":          "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
		"AGENT_TYPE_SYNC":            "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä",
		"AGENT_TYPE_MIGRATOR":        "–ú–∏–≥—Ä–∞—Ç–æ—Ä",
		"AGENT_TYPE_CLEANER":         "–û—á–∏—Å—Ç–∏—Ç–µ–ª—å",
		"AGENT_TYPE_SECURITY":        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
		"AGENT_TYPE_AUDIT":           "–ê—É–¥–∏—Ç",
		"AGENT_TYPE_COMPLIANCE":      "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
		"AGENT_TYPE_REPORTING":       "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
		"AGENT_TYPE_PREDICTION":      "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
		"AGENT_TYPE_RECOMMENDATION":  "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
		"AGENT_TYPE_PERSONALIZATION": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
		"AGENT_TYPE_API":             "API",
		"AGENT_TYPE_WEBHOOK":         "Webhook",
		"AGENT_TYPE_QUEUE":           "–û—á–µ—Ä–µ–¥—å",
		"AGENT_TYPE_CACHE":           "–ö—ç—à",
		"AGENT_TYPE_DATABASE":        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
		"AGENT_TYPE_FILE":            "–§–∞–π–ª",
		"AGENT_TYPE_EMAIL":           "Email",
		"AGENT_TYPE_SMS":             "SMS",
		"AGENT_TYPE_PUSH":            "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
		"AGENT_TYPE_VOICE":           "–ì–æ–ª–æ—Å",
		"AGENT_TYPE_VIDEO":           "–í–∏–¥–µ–æ",
		"AGENT_TYPE_IMAGE":           "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
		"AGENT_TYPE_DOCUMENT":        "–î–æ–∫—É–º–µ–Ω—Ç",
		"AGENT_TYPE_SPREADSHEET":     "–¢–∞–±–ª–∏—Ü–∞",
		"AGENT_TYPE_PRESENTATION":    "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
		"AGENT_TYPE_PDF":             "PDF",
		"AGENT_TYPE_XML":             "XML",
		"AGENT_TYPE_JSON":            "JSON",
		"AGENT_TYPE_CSV":             "CSV",
		"AGENT_TYPE_EXCEL":           "Excel",
		"AGENT_TYPE_WORD":            "Word",
		"AGENT_TYPE_POWERPOINT":      "PowerPoint",
		"AGENT_TYPE_UNKNOWN":         "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
		"AGENT_TYPE_OTHER":           "–î—Ä—É–≥–æ–µ",
		// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
		"CHAT":            "–ß–∞—Ç-–±–æ—Ç",
		"ASSISTANT":       "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
		"WORKER":          "–†–∞–±–æ—Ç–Ω–∏–∫",
		"ANALYZER":        "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
		"GENERATOR":       "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
		"CLASSIFIER":      "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
		"TRANSLATOR":      "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
		"SUMMARIZER":      "–°—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä",
		"EXTRACTOR":       "–ò–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å",
		"VALIDATOR":       "–í–∞–ª–∏–¥–∞—Ç–æ—Ä",
		"OPTIMIZER":       "–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä",
		"MONITOR":         "–ú–æ–Ω–∏—Ç–æ—Ä",
		"SCHEDULER":       "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
		"ROUTER":          "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä",
		"AGGREGATOR":      "–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä",
		"FILTER":          "–§–∏–ª—å—Ç—Ä",
		"TRANSFORMER":     "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä",
		"ENRICHER":        "–û–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å",
		"NOTIFIER":        "–£–≤–µ–¥–æ–º–∏—Ç–µ–ª—å",
		"ARCHIVER":        "–ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä",
		"BACKUP":          "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
		"SYNC":            "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä",
		"MIGRATOR":        "–ú–∏–≥—Ä–∞—Ç–æ—Ä",
		"CLEANER":         "–û—á–∏—Å—Ç–∏—Ç–µ–ª—å",
		"SECURITY":        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
		"AUDIT":           "–ê—É–¥–∏—Ç",
		"COMPLIANCE":      "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
		"REPORTING":       "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
		"ANALYTICS":       "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
		"PREDICTION":      "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
		"RECOMMENDATION":  "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
		"PERSONALIZATION": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
		"AUTOMATION":      "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
		"INTEGRATION":     "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
		"API":             "API",
		"WEBHOOK":         "Webhook",
		"QUEUE":           "–û—á–µ—Ä–µ–¥—å",
		"CACHE":           "–ö—ç—à",
		"DATABASE":        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
		"FILE":            "–§–∞–π–ª",
		"EMAIL":           "Email",
		"SMS":             "SMS",
		"PUSH":            "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
		"VOICE":           "–ì–æ–ª–æ—Å",
		"VIDEO":           "–í–∏–¥–µ–æ",
		"IMAGE":           "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
		"DOCUMENT":        "–î–æ–∫—É–º–µ–Ω—Ç",
		"SPREADSHEET":     "–¢–∞–±–ª–∏—Ü–∞",
		"PRESENTATION":    "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
		"PDF":             "PDF",
		"XML":             "XML",
		"JSON":            "JSON",
		"CSV":             "CSV",
		"EXCEL":           "Excel",
		"WORD":            "Word",
		"POWERPOINT":      "PowerPoint",
		"UNKNOWN":         "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
		"OTHER":           "–î—Ä—É–≥–æ–µ",
	}

	if translation, exists := typeTranslations[strings.ToUpper(agentType)]; exists {
		return translation
	}

	// –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	return agentType
}

// FormatUserName —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func FormatUserName(userID, firstName, lastName, email string) string {
	if firstName != "" && lastName != "" {
		return fmt.Sprintf("%s %s (%s)", firstName, lastName, userID)
	}
	if firstName != "" {
		return fmt.Sprintf("%s (%s)", firstName, userID)
	}
	if lastName != "" {
		return fmt.Sprintf("%s (%s)", lastName, userID)
	}
	if email != "" {
		return fmt.Sprintf("%s (%s)", email, userID)
	}
	// –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
	return fmt.Sprintf("ID: %s", userID)
}

// TruncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func TruncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

// FormatStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
func FormatStatus(status string) string {
	switch status {
	case "AGENT_STATUS_ACTIVE":
		return "üü¢ –ó–∞–ø—É—â–µ–Ω"
	case "AGENT_STATUS_INACTIVE":
		return "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	case "AGENT_STATUS_PENDING":
		return "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
	case "AGENT_STATUS_ERROR":
		return "‚ùå –û—à–∏–±–∫–∞"
	case "AGENT_STATUS_DELETING":
		return "üî¥ –£–¥–∞–ª—è–µ—Ç—Å—è"
	case "AGENT_STATUS_DELETED":
		return "‚ö´ –£–¥–∞–ª–µ–Ω"
	case "AGENT_STATUS_COOLED":
		return "üí§ –û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å–∞"
	default:
		return status
	}
}

// CreateAgentsTable —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞–≥–µ–Ω—Ç–æ–≤
func CreateAgentsTable(agents []api.Agent, title string) *TableModel {
	columns := []table.Column{
		{Title: "ID", Width: 200},
		{Title: "–ù–∞–∑–≤–∞–Ω–∏–µ", Width: 100},
		{Title: "–°—Ç–∞—Ç—É—Å", Width: 25},
		{Title: "–¢–∏–ø", Width: 50},
		{Title: "–°–æ–∑–¥–∞–ª", Width: 200},
		{Title: "–ò–∑–º–µ–Ω–∏–ª", Width: 200},
		{Title: "–°–æ–∑–¥–∞–Ω", Width: 16},
		{Title: "–û–±–Ω–æ–≤–ª–µ–Ω", Width: 16},
	}

	var rows []table.Row
	for _, agent := range agents {
		agentType := FormatAgentType(agent.AgentType)
		rows = append(rows, table.Row{
			agent.ID,
			agent.Name,
			FormatStatus(agent.Status),
			agentType,
			"ID: " + agent.CreatedBy,
			"ID: " + agent.UpdatedBy,
			agent.CreatedAt.Time.Format("02.01.2006 15:04"),
			agent.UpdatedAt.Time.Format("02.01.2006 15:04"),
		})
	}

	return NewTableModel(title, columns, rows)
}

// CreateMCPServersTable —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
func CreateMCPServersTable(servers []api.MCPServer, title string) *TableModel {
	columns := []table.Column{
		{Title: "ID", Width: 40},
		{Title: "–ù–∞–∑–≤–∞–Ω–∏–µ", Width: 50},
		{Title: "–°—Ç–∞—Ç—É—Å", Width: 25},
		{Title: "–û–ø–∏—Å–∞–Ω–∏–µ", Width: 60},
		{Title: "–°–æ–∑–¥–∞–Ω", Width: 16},
		{Title: "–û–±–Ω–æ–≤–ª–µ–Ω", Width: 16},
	}

	var rows []table.Row
	for _, server := range servers {
		rows = append(rows, table.Row{
			server.ID,
			server.Name,
			FormatStatus(server.Status),
			server.Description,
			server.CreatedAt.Format("02.01.2006 15:04"),
			server.UpdatedAt.Format("02.01.2006 15:04"),
		})
	}

	return NewTableModel(title, columns, rows)
}

// TableModel –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
type TableModel struct {
	table table.Model
	title string
}

// NewTableModel —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
func NewTableModel(title string, columns []table.Column, rows []table.Row) *TableModel {
	t := table.New(
		table.WithColumns(columns),
		table.WithRows(rows),
		table.WithFocused(true),
		table.WithHeight(20),
	)

	return &TableModel{
		table: t,
		title: title,
	}
}

// View –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É
func (m *TableModel) View() string {
	return fmt.Sprintf("%s\n\n%s", m.title, m.table.View())
}

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
func (m *TableModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmd tea.Cmd
	m.table, cmd = m.table.Update(msg)
	return m, cmd
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
func (m *TableModel) Init() tea.Cmd {
	return nil
}

// GetSelectedRow –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
func (m *TableModel) GetSelectedRow() table.Row {
	return m.table.SelectedRow()
}

// ServerPaginatedTableModel –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
type ServerPaginatedTableModel struct {
	table      table.Model
	title      string
	ctx        context.Context
	limit      int
	offset     int
	total      int
	page       int
	pages      int
	dataLoader func(ctx context.Context, limit, offset int) ([]table.Row, int, error)
	loading    bool
}

// NewServerPaginatedTableModel —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func NewServerPaginatedTableModel(ctx context.Context, title string, columns []table.Column, limit int, dataLoader func(ctx context.Context, limit, offset int) ([]table.Row, int, error)) *ServerPaginatedTableModel {
	t := table.New(
		table.WithColumns(columns),
		table.WithFocused(true),
		table.WithHeight(20),
	)

	model := &ServerPaginatedTableModel{
		table:      t,
		title:      title,
		ctx:        ctx,
		limit:      limit,
		offset:     0,
		total:      0,
		page:       1,
		pages:      0,
		dataLoader: dataLoader,
		loading:    false,
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	model.loadPage(1)

	return model
}

// loadPage –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
func (m *ServerPaginatedTableModel) loadPage(page int) {
	m.loading = true
	m.page = page
	m.offset = (page - 1) * m.limit

	rows, total, err := m.dataLoader(m.ctx, m.limit, m.offset)
	if err != nil {
		log.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "error", err)
		return
	}

	m.total = total
	m.pages = (total + m.limit - 1) / m.limit
	m.table.SetRows(rows)
	m.loading = false
}

// View –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É
func (m *ServerPaginatedTableModel) View() string {
	if m.loading {
		return fmt.Sprintf("%s\n\n–ó–∞–≥—Ä—É–∑–∫–∞...", m.title)
	}

	title := fmt.Sprintf("%s (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d, –≤—Å–µ–≥–æ: %d)", m.title, m.page, m.pages, m.total)
	return fmt.Sprintf("%s\n\n%s", title, m.table.View())
}

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
func (m *ServerPaginatedTableModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "h", "left":
			if m.page > 1 {
				m.loadPage(m.page - 1)
			}
		case "l", "right":
			if m.page < m.pages {
				m.loadPage(m.page + 1)
			}
		}
	}

	var cmd tea.Cmd
	m.table, cmd = m.table.Update(msg)
	return m, cmd
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
func (m *ServerPaginatedTableModel) Init() tea.Cmd {
	return nil
}

// GetSelectedRow –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
func (m *ServerPaginatedTableModel) GetSelectedRow() table.Row {
	return m.table.SelectedRow()
}
