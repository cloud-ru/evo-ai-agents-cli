package ui

import (
	"context"
	"fmt"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/cloudru/ai-agents-cli/internal/api"
	"github.com/cloudru/ai-agents-cli/internal/di"
)

// RenderTabs —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–µ —Ç–∞–±—ã
func RenderTabs(tabs []string, activeTab int, content string) string {
	// –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
	activeTabStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39")).
		Background(lipgloss.Color("236")).
		Padding(0, 2)

	inactiveTabStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("240")).
		Padding(0, 2)

	contentStyle := lipgloss.NewStyle().
		Padding(1, 0).
		Margin(1, 0)

	// –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±—ã –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	var renderedTabs []string
	for i, tab := range tabs {
		if i == activeTab {
			renderedTabs = append(renderedTabs, activeTabStyle.Render(tab))
		} else {
			renderedTabs = append(renderedTabs, inactiveTabStyle.Render(tab))
		}
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±—ã
	row := strings.Join(renderedTabs, " | ")

	// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
	content = contentStyle.Render(content)

	// –†–µ–∑—É–ª—å—Ç–∞—Ç
	result := strings.Builder{}
	result.WriteString("‚îå‚îÄ –¢–∞–±—ã: ")
	result.WriteString(row)
	result.WriteString("\n")
	result.WriteString("‚îî‚îÄ\n\n")
	result.WriteString(content)

	return result.String()
}

// RenderAgentDetailsWithTabs –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ —Å —Ç–∞–±–∞–º–∏
func RenderAgentDetailsWithTabs(agent *api.Agent, ctx context.Context, container *di.Container) string {
	// –°—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39")).
		Align(lipgloss.Center).
		Padding(1, 2).
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("39"))

	labelStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39"))

	valueStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("252"))

	tabStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39")).
		Margin(0, 0, 1, 0)

	sectionStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("214")).
		Margin(1, 0)

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	result := ""
	result += headerStyle.Render("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ")
	result += "\n\n"

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Å—Ä–∞–∑—É (–∫–∞–∫ —Ç–∞–±—ã, –Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ)

	// –°–µ–∫—Ü–∏—è 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	result += sectionStyle.Render("üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
	result += "\n"
	generalInfo := renderGeneralInfo(agent, ctx, container, labelStyle, valueStyle, tabStyle)
	result += generalInfo
	result += "\n\n"

	// –°–µ–∫—Ü–∏—è 2: MCP –°–µ—Ä–≤–µ—Ä—ã
	result += sectionStyle.Render("üîå MCP –°–ï–†–í–ï–†–ê")
	result += "\n"
	mcpInfo := renderMCPInfo(agent, labelStyle, valueStyle, tabStyle)
	result += mcpInfo
	result += "\n\n"

	// –°–µ–∫—Ü–∏—è 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
	result += sectionStyle.Render("‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò")
	result += "\n"
	optionsInfo := renderOptionsInfo(agent, labelStyle, valueStyle, tabStyle)
	result += optionsInfo

	return result
}

// AgentDetailsTabs –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å —Å —Ç–∞–±–∞–º–∏
type AgentDetailsTabs struct {
	agent      *api.Agent
	ctx        context.Context
	container  *di.Container
	tabs       []string
	tabContent []string
	activeTab  int
	width      int
	height     int
}

// NewAgentDetailsTabs —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å —Å —Ç–∞–±–∞–º–∏
func NewAgentDetailsTabs(agent *api.Agent, ctx context.Context, container *di.Container) *AgentDetailsTabs {
	tabs := []string{
		"üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
		"üîå MCP –°–µ—Ä–≤–µ—Ä—ã",
		"‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏",
	}

	model := &AgentDetailsTabs{
		agent:     agent,
		ctx:       ctx,
		container: container,
		tabs:      tabs,
		activeTab: 0,
		width:     80,
		height:    24,
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤
	model.generateTabContent()

	return model
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å
func (m *AgentDetailsTabs) Init() tea.Cmd {
	return nil
}

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å
func (m *AgentDetailsTabs) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q", "esc":
			return m, tea.Quit
		case "right", "l", "n", "tab":
			m.activeTab = min(m.activeTab+1, len(m.tabs)-1)
			return m, nil
		case "left", "h", "p", "shift+tab":
			m.activeTab = max(m.activeTab-1, 0)
			return m, nil
		}
	case tea.WindowSizeMsg:
		m.width = msg.Width
		m.height = msg.Height
		return m, nil
	}
	return m, nil
}

// View –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–µ–ª—å
func (m *AgentDetailsTabs) View() string {
	// –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–æ–≤ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ Bubble Tea)
	tabBorder := func(left, middle, right string) lipgloss.Border {
		border := lipgloss.RoundedBorder()
		border.BottomLeft = left
		border.Bottom = middle
		border.BottomRight = right
		return border
	}

	inactiveTabBorder := tabBorder("‚î¥", "‚îÄ", "‚î¥")
	activeTabBorder := tabBorder("‚îò", " ", "‚îî")
	highlightColor := lipgloss.AdaptiveColor{Light: "#874BFD", Dark: "#7D56F4"}

	inactiveTabStyle := lipgloss.NewStyle().
		Border(inactiveTabBorder, true).
		BorderForeground(highlightColor).
		Padding(0, 1)

	activeTabStyle := inactiveTabStyle.Border(activeTabBorder, true)

	windowStyle := lipgloss.NewStyle().
		BorderForeground(highlightColor).
		Padding(2, 0).
		Align(lipgloss.Center).
		Border(lipgloss.NormalBorder()).
		UnsetBorderTop()

	docStyle := lipgloss.NewStyle().Padding(1, 2, 1, 2)

	// –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±—ã
	var renderedTabs []string
	for i, tab := range m.tabs {
		var style lipgloss.Style
		isFirst, isLast, isActive := i == 0, i == len(m.tabs)-1, i == m.activeTab

		if isActive {
			style = activeTabStyle
		} else {
			style = inactiveTabStyle
		}

		border, _, _, _, _ := style.GetBorder()
		if isFirst && isActive {
			border.BottomLeft = "‚îÇ"
		} else if isFirst && !isActive {
			border.BottomLeft = "‚îú"
		} else if isLast && isActive {
			border.BottomRight = "‚îÇ"
		} else if isLast && !isActive {
			border.BottomRight = "‚î§"
		}
		style = style.Border(border)

		renderedTabs = append(renderedTabs, style.Render(tab))
	}

	row := lipgloss.JoinHorizontal(lipgloss.Top, renderedTabs...)

	// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
	content := m.tabContent[m.activeTab]
	windowStyle = windowStyle.Width(lipgloss.Width(row) - windowStyle.GetHorizontalFrameSize())
	content = windowStyle.Render(content)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	result := strings.Builder{}
	result.WriteString(row)
	result.WriteString("\n")
	result.WriteString(content)

	return docStyle.Render(result.String())
}

// generateTabContent –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–æ–≤
func (m *AgentDetailsTabs) generateTabContent() {
	// –°—Ç–∏–ª–∏
	labelStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39"))

	valueStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("252"))

	tabStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39")).
		Margin(0, 0, 1, 0)

	// –¢–∞–± 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	generalInfo := renderGeneralInfo(m.agent, m.ctx, m.container, labelStyle, valueStyle, tabStyle)
	m.tabContent = append(m.tabContent, generalInfo)

	// –¢–∞–± 2: MCP –°–µ—Ä–≤–µ—Ä—ã
	mcpInfo := renderMCPInfo(m.agent, labelStyle, valueStyle, tabStyle)
	m.tabContent = append(m.tabContent, mcpInfo)

	// –¢–∞–± 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
	optionsInfo := renderOptionsInfo(m.agent, labelStyle, valueStyle, tabStyle)
	m.tabContent = append(m.tabContent, optionsInfo)
}

// min –∏ max —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

// renderGeneralInfo —Ä–µ–Ω–¥–µ—Ä–∏—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func renderGeneralInfo(agent *api.Agent, ctx context.Context, container *di.Container, labelStyle, valueStyle, tabStyle lipgloss.Style) string {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
	createdByInfo := getCreatedByInfoForUI(ctx, container, agent.CreatedBy)
	updatedByInfo := getUpdatedByInfoForUI(ctx, container, agent.UpdatedBy)

	result := ""
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("ID"), valueStyle.Render(agent.ID))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(agent.Name))

	if agent.ProjectID != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("Project ID"), valueStyle.Render(agent.ProjectID))
	}

	if agent.Description != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–û–ø–∏—Å–∞–Ω–∏–µ"), valueStyle.Render(agent.Description))
	}

	// –¢–∏–ø –∞–≥–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
	agentType := FormatAgentType(agent.AgentType)
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–¢–∏–ø"), valueStyle.Render(agentType))

	// –°—Ç–∞—Ç—É—Å
	status := FormatStatus(agent.Status)
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°—Ç–∞—Ç—É—Å"), status)

	// –ü—Ä–∏—á–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
	if agent.StatusReason.ReasonType != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ü—Ä–∏—á–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞"), valueStyle.Render(agent.StatusReason.ReasonType))
		if agent.StatusReason.Message != "" {
			result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°–æ–æ–±—â–µ–Ω–∏–µ"), valueStyle.Render(agent.StatusReason.Message))
		}
		if agent.StatusReason.Key != "" {
			result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ö–ª—é—á"), valueStyle.Render(agent.StatusReason.Key))
		}
	}

	// –î–∞—Ç—ã –∏ –∞–≤—Ç–æ—Ä—ã
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–Ω"), valueStyle.Render(agent.CreatedAt.Time.Format("02.01.2006 15:04:05")))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–ª"), valueStyle.Render(createdByInfo))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–û–±–Ω–æ–≤–ª–µ–Ω"), valueStyle.Render(agent.UpdatedAt.Time.Format("02.01.2006 15:04:05")))
	result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ò–∑–º–µ–Ω–∏–ª"), valueStyle.Render(updatedByInfo))

	// URLs
	if agent.PublicURL != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("–ü—É–±–ª–∏—á–Ω—ã–π URL"), valueStyle.Render(agent.PublicURL))
	}
	if agent.ArizePhoenixPublicURL != "" {
		result += fmt.Sprintf("%s: %s\n", labelStyle.Render("Arize Phoenix URL"), valueStyle.Render(agent.ArizePhoenixPublicURL))
	}

	// –¢–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞
	if agent.InstanceType.ID != "" {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üíª –¢–∏–ø –∏–Ω—Å—Ç–∞–Ω—Å–∞:"))
		result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("ID"), valueStyle.Render(agent.InstanceType.ID))
		result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ù–∞–∑–≤–∞–Ω–∏–µ"), valueStyle.Render(agent.InstanceType.Name))
		if agent.InstanceType.SKUCode != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("SKU –∫–æ–¥"), valueStyle.Render(agent.InstanceType.SKUCode))
		}
		if agent.InstanceType.ResourceCode != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ö–æ–¥ —Ä–µ—Å—É—Ä—Å–∞"), valueStyle.Render(agent.InstanceType.ResourceCode))
		}
		result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ê–∫—Ç–∏–≤–µ–Ω"), valueStyle.Render(fmt.Sprintf("%t", agent.InstanceType.IsActive)))
		if agent.InstanceType.MCPU > 0 {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("CPU"), valueStyle.Render(fmt.Sprintf("%d –ºCPU", agent.InstanceType.MCPU)))
		}
		if agent.InstanceType.MibRAM > 0 {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("RAM"), valueStyle.Render(fmt.Sprintf("%d –ú–ë", agent.InstanceType.MibRAM)))
		}
		if agent.InstanceType.CreatedAt != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–Ω"), valueStyle.Render(agent.InstanceType.CreatedAt))
		}
		if agent.InstanceType.UpdatedAt != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–û–±–Ω–æ–≤–ª–µ–Ω"), valueStyle.Render(agent.InstanceType.UpdatedAt))
		}
		if agent.InstanceType.CreatedBy != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–°–æ–∑–¥–∞–ª"), valueStyle.Render(agent.InstanceType.CreatedBy))
		}
		if agent.InstanceType.UpdatedBy != "" {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ò–∑–º–µ–Ω–∏–ª"), valueStyle.Render(agent.InstanceType.UpdatedBy))
		}
	}

	return result
}

// renderMCPInfo —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MCP —Å–µ—Ä–≤–µ—Ä–∞—Ö
func renderMCPInfo(agent *api.Agent, labelStyle, valueStyle, tabStyle lipgloss.Style) string {
	result := ""

	// MCP —Å–µ—Ä–≤–µ—Ä—ã (–Ω–æ–≤—ã–µ)
	if len(agent.MCPServers) > 0 {
		result += fmt.Sprintf("%s\n", tabStyle.Render("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:"))
		for i, mcp := range agent.MCPServers {
			result += fmt.Sprintf("  %d. %s (%s) - %s\n", i+1, mcp.Name, mcp.ID, mcp.Status)
			if mcp.Source != nil && len(mcp.Source) > 0 {
				for key, value := range mcp.Source {
					result += fmt.Sprintf("     %s: %v\n", labelStyle.Render("–ò—Å—Ç–æ—á–Ω–∏–∫"), valueStyle.Render(fmt.Sprintf("%s: %v", key, value)))
				}
			}
			if len(mcp.Tools) > 0 {
				result += fmt.Sprintf("     %s (%d):\n", labelStyle.Render("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"), len(mcp.Tools))
				for j, tool := range mcp.Tools {
					result += fmt.Sprintf("       %d. %s\n", j+1, tool.Name)
					if tool.Description != "" {
						// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
						desc := tool.Description
						if len(desc) > 100 {
							desc = desc[:100] + "..."
						}
						result += fmt.Sprintf("          %s\n", valueStyle.Render(desc))
					}
					result += fmt.Sprintf("          %s: %d\n", labelStyle.Render("–ê—Ä–≥—É–º–µ–Ω—Ç—ã"), len(tool.Args))
				}
			}
		}
	} else {
		result += fmt.Sprintf("%s\n", tabStyle.Render("‚ùå MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"))
	}

	// MCP —Å–µ—Ä–≤–µ—Ä—ã (—Å—Ç–∞—Ä—ã–µ)
	if len(agent.MCPs) > 0 {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üì° –°—Ç–∞—Ä—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã:"))
		for i, mcp := range agent.MCPs {
			result += fmt.Sprintf("  %d. %s\n", i+1, mcp)
		}
	}

	return result
}

// renderOptionsInfo —Ä–µ–Ω–¥–µ—Ä–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func renderOptionsInfo(agent *api.Agent, labelStyle, valueStyle, tabStyle lipgloss.Style) string {
	result := ""

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	result += fmt.Sprintf("%s\n", tabStyle.Render("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"))
	mcpCount := len(agent.MCPServers)
	if len(agent.MCPs) > 0 {
		mcpCount = len(agent.MCPs)
	}
	result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"), mcpCount)
	result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("–û–ø—Ü–∏–π"), len(agent.Options))
	result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"), len(agent.IntegrationOptions))
	if len(agent.UsedInAgentSystems) > 0 {
		result += fmt.Sprintf("  %s: %d\n", labelStyle.Render("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ö"), len(agent.UsedInAgentSystems))
	}

	// System Prompt –∏–∑ Options
	if systemPrompt, ok := agent.Options["systemPrompt"]; ok {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìù System Prompt:"))
		result += fmt.Sprintf("  %s\n", valueStyle.Render(fmt.Sprintf("%v", systemPrompt)))
	}

	// LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Options
	if llm, ok := agent.Options["llm"]; ok {
		if llmMap, ok := llm.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üß† LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"))
			if foundationModels, ok := llmMap["foundationModels"]; ok {
				if fmMap, ok := foundationModels.(map[string]interface{}); ok {
					if modelName, ok := fmMap["modelName"]; ok {
						result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–ú–æ–¥–µ–ª—å"), valueStyle.Render(fmt.Sprintf("%v", modelName)))
					}
					if gcInstanceId, ok := fmMap["gcInstanceId"]; ok {
						result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("GC Instance ID"), valueStyle.Render(fmt.Sprintf("%v", gcInstanceId)))
					}
				}
			}
		}
	}

	// Scaling –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Options
	if scaling, ok := agent.Options["scaling"]; ok {
		if scalingMap, ok := scaling.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìà Scaling –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"))
			if minScale, ok := scalingMap["minScale"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Min Scale"), valueStyle.Render(fmt.Sprintf("%v", minScale)))
			}
			if maxScale, ok := scalingMap["maxScale"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Max Scale"), valueStyle.Render(fmt.Sprintf("%v", maxScale)))
			}
			if isKeepAlive, ok := scalingMap["isKeepAlive"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Keep Alive"), valueStyle.Render(fmt.Sprintf("%v", isKeepAlive)))
			}
			if keepAliveDuration, ok := scalingMap["keepAliveDuration"]; ok {
				if durationMap, ok := keepAliveDuration.(map[string]interface{}); ok {
					hours := durationMap["hours"]
					minutes := durationMap["minutes"]
					seconds := durationMap["seconds"]
					result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Keep Alive Duration"), valueStyle.Render(fmt.Sprintf("%vh %vm %vs", hours, minutes, seconds)))
				}
			}
		}
	}

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑ IntegrationOptions
	if authOptions, ok := agent.IntegrationOptions["authOptions"]; ok {
		if authMap, ok := authOptions.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:"))
			if isEnabled, ok := authMap["isEnabled"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–í–∫–ª—é—á–µ–Ω–∞"), valueStyle.Render(fmt.Sprintf("%v", isEnabled)))
			}
			if authType, ok := authMap["type"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–¢–∏–ø"), valueStyle.Render(fmt.Sprintf("%v", authType)))
			}
			if serviceAccountId, ok := authMap["serviceAccountId"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Service Account ID"), valueStyle.Render(fmt.Sprintf("%v", serviceAccountId)))
			}
		}
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ IntegrationOptions
	if logging, ok := agent.IntegrationOptions["logging"]; ok {
		if loggingMap, ok := logging.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:"))
			if isEnabled, ok := loggingMap["isEnabledLogging"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–í–∫–ª—é—á–µ–Ω–æ"), valueStyle.Render(fmt.Sprintf("%v", isEnabled)))
			}
			if logGroupId, ok := loggingMap["logGroupId"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("Log Group ID"), valueStyle.Render(fmt.Sprintf("%v", logGroupId)))
			}
		}
	}

	// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ IntegrationOptions
	if autoUpdate, ok := agent.IntegrationOptions["autoUpdateOptions"]; ok {
		if autoUpdateMap, ok := autoUpdate.(map[string]interface{}); ok {
			result += fmt.Sprintf("\n%s\n", tabStyle.Render("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:"))
			if isEnabled, ok := autoUpdateMap["isEnabled"]; ok {
				result += fmt.Sprintf("  %s: %s\n", labelStyle.Render("–í–∫–ª—é—á–µ–Ω–æ"), valueStyle.Render(fmt.Sprintf("%v", isEnabled)))
			}
		}
	}

	// –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑–∞
	if agent.ImageSource != nil {
		result += fmt.Sprintf("\n%s\n", tabStyle.Render("üê≥ –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑–∞:"))
		for key, value := range agent.ImageSource {
			result += fmt.Sprintf("  %s: %s\n", labelStyle.Render(key), valueStyle.Render(fmt.Sprintf("%v", value)))
		}
	}

	return result
}
