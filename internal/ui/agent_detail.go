package ui

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/lipgloss"
	"github.com/cloud-ru/evo-ai-agents-cli/internal/api"
)

// AgentDetailModel –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≥–µ–Ω—Ç–∞ —Å —Ç–∞–±–∞–º–∏
type AgentDetailModel struct {
	Agent *api.Agent
	Tabs  *TabModel
}

// NewAgentDetailModel —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≥–µ–Ω—Ç–∞
func NewAgentDetailModel(agent *api.Agent) *AgentDetailModel {
	tabs := []string{
		"üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
		"üß† LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
		"üìà Scaling",
		"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
		"üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
		"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
		"üê≥ –û–±—Ä–∞–∑",
		"‚öôÔ∏è –û–ø—Ü–∏–∏",
	}

	content := []string{
		formatGeneralInfo(agent),
		formatLLMSettings(agent),
		formatScalingSettings(agent),
		formatAuthSettings(agent),
		formatLoggingSettings(agent),
		formatAutoUpdateSettings(agent),
		formatImageSource(agent),
		formatOptions(agent),
	}

	return &AgentDetailModel{
		Agent: agent,
		Tabs:  NewTabModel(tabs, content),
	}
}

// Render –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
func (m *AgentDetailModel) Render() string {
	header := fmt.Sprintf("ü§ñ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: %s", m.Agent.Name)
	headerStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39")).
		MarginBottom(1)

	return headerStyle.Render(header) + "\n" + m.Tabs.Render()
}

// formatGeneralInfo —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º layout
func formatGeneralInfo(agent *api.Agent) string {
	// –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
	leftStyle := lipgloss.NewStyle().
		Width(50).
		Align(lipgloss.Left)

	rightStyle := lipgloss.NewStyle().
		Width(50).
		Align(lipgloss.Right)

	centerStyle := lipgloss.NewStyle().
		Width(100).
		Align(lipgloss.Center).
		MarginBottom(1)

	// –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	leftInfo := strings.Builder{}
	leftInfo.WriteString(fmt.Sprintf("üÜî ID: %s\n", agent.ID))
	leftInfo.WriteString(fmt.Sprintf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", agent.Name))
	leftInfo.WriteString(fmt.Sprintf("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", getDescription(agent.Description)))
	leftInfo.WriteString(fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n", FormatStatus(agent.Status)))
	leftInfo.WriteString(fmt.Sprintf("üè∑Ô∏è –¢–∏–ø: %s\n", FormatAgentType(agent.AgentType)))

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Project ID
	if agent.ProjectID != "" {
		leftInfo.WriteString(fmt.Sprintf("üè¢ –ü—Ä–æ–µ–∫—Ç: %s\n", agent.ProjectID))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞
	if agent.InstanceType.ID != "" {
		leftInfo.WriteString(fmt.Sprintf("üíª –ò–Ω—Å—Ç–∞–Ω—Å: %s (%s)\n", agent.InstanceType.Name, agent.InstanceType.SKUCode))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MCP —Å–µ—Ä–≤–µ—Ä–∞—Ö
	if len(agent.MCPServers) > 0 {
		leftInfo.WriteString(fmt.Sprintf("üîå MCP —Å–µ—Ä–≤–µ—Ä—ã: %d\n", len(agent.MCPServers)))
		for i, mcp := range agent.MCPServers {
			if i < 3 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
				leftInfo.WriteString(fmt.Sprintf("  ‚Ä¢ %s (%s)\n", mcp.Name, mcp.Status))
			}
		}
		if len(agent.MCPServers) > 3 {
			leftInfo.WriteString(fmt.Sprintf("  ... –∏ –µ—â–µ %d\n", len(agent.MCPServers)-3))
		}
	}

	// –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
	rightInfo := strings.Builder{}
	rightInfo.WriteString(fmt.Sprintf("üìÖ –°–æ–∑–¥–∞–Ω: %s\n", agent.CreatedAt.Time.Format("02.01.2006 15:04:05")))
	rightInfo.WriteString(fmt.Sprintf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: %s\n", agent.UpdatedAt.Time.Format("02.01.2006 15:04:05")))

	if agent.CreatedBy != "" {
		rightInfo.WriteString(fmt.Sprintf("üë§ –°–æ–∑–¥–∞–ª: %s\n", agent.CreatedBy))
	}
	if agent.UpdatedBy != "" {
		rightInfo.WriteString(fmt.Sprintf("‚úèÔ∏è –ò–∑–º–µ–Ω–∏–ª: %s\n", agent.UpdatedBy))
	}

	// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è - URL –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	centerInfo := strings.Builder{}
	if agent.PublicURL != "" {
		centerInfo.WriteString(fmt.Sprintf("üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: %s\n", agent.PublicURL))
	}
	if agent.ArizePhoenixPublicURL != "" {
		centerInfo.WriteString(fmt.Sprintf("üìä Arize Phoenix URL: %s\n", agent.ArizePhoenixPublicURL))
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
	var result strings.Builder
	result.WriteString(centerStyle.Render(centerInfo.String()))

	// –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
	leftContent := leftStyle.Render(leftInfo.String())
	rightContent := rightStyle.Render(rightInfo.String())

	result.WriteString(lipgloss.JoinHorizontal(lipgloss.Top, leftContent, rightContent))

	return result.String()
}

// formatLLMSettings —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
func formatLLMSettings(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏:\n\n")

	// LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Options
	if llmOpts, ok := agent.Options["llm"].(map[string]interface{}); ok {
		if foundationModels, ok := llmOpts["foundationModels"].(map[string]interface{}); ok {
			if modelName, ok := foundationModels["modelName"].(string); ok {
				info.WriteString(fmt.Sprintf("üìù –ú–æ–¥–µ–ª—å: %s\n", modelName))
			}
			if gcInstanceId, ok := foundationModels["gcInstanceId"].(string); ok && gcInstanceId != "" {
				info.WriteString(fmt.Sprintf("üÜî GC Instance ID: %s\n", gcInstanceId))
			}
		}
	}

	// System prompt
	if systemPrompt, ok := agent.Options["systemPrompt"].(string); ok && systemPrompt != "" {
		info.WriteString(fmt.Sprintf("üí¨ System Prompt: %s\n", systemPrompt))
	}

	return info.String()
}

// formatScalingSettings —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
func formatScalingSettings(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n")

	if scaling, ok := agent.Options["scaling"].(map[string]interface{}); ok {
		if minScale, ok := scaling["minScale"].(float64); ok {
			info.WriteString(fmt.Sprintf("üìâ Min Scale: %.0f\n", minScale))
		}
		if maxScale, ok := scaling["maxScale"].(float64); ok {
			info.WriteString(fmt.Sprintf("üìà Max Scale: %.0f\n", maxScale))
		}
		if isKeepAlive, ok := scaling["isKeepAlive"].(bool); ok {
			info.WriteString(fmt.Sprintf("üí§ Keep Alive: %t\n", isKeepAlive))
		}
		if isScaleUpAllSystem, ok := scaling["isScaleUpAllSystem"].(bool); ok {
			info.WriteString(fmt.Sprintf("üîÑ Scale Up All System: %t\n", isScaleUpAllSystem))
		}
	}

	return info.String()
}

// formatAuthSettings —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func formatAuthSettings(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n\n")

	if authOptions, ok := agent.Options["authOptions"].(map[string]interface{}); ok {
		if isEnabled, ok := authOptions["isEnabled"].(bool); ok {
			info.WriteString(fmt.Sprintf("‚úÖ –í–∫–ª—é—á–µ–Ω–∞: %t\n", isEnabled))
		}
		if authType, ok := authOptions["type"].(string); ok {
			info.WriteString(fmt.Sprintf("üîë –¢–∏–ø: %s\n", authType))
		}
		if serviceAccountId, ok := authOptions["serviceAccountId"].(string); ok {
			info.WriteString(fmt.Sprintf("üë§ Service Account ID: %s\n", serviceAccountId))
		}
	}

	return info.String()
}

// formatLoggingSettings —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func formatLoggingSettings(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n")

	if logging, ok := agent.Options["logging"].(map[string]interface{}); ok {
		if isEnabled, ok := logging["isEnabledLogging"].(bool); ok {
			info.WriteString(fmt.Sprintf("‚úÖ –í–∫–ª—é—á–µ–Ω–æ: %t\n", isEnabled))
		}
		if logGroupId, ok := logging["logGroupId"].(string); ok {
			info.WriteString(fmt.Sprintf("üìÅ Log Group ID: %s\n", logGroupId))
		}
	}

	return info.String()
}

// formatAutoUpdateSettings —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func formatAutoUpdateSettings(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n")

	if autoUpdate, ok := agent.Options["autoUpdateOptions"].(map[string]interface{}); ok {
		if isEnabled, ok := autoUpdate["isEnabled"].(bool); ok {
			info.WriteString(fmt.Sprintf("‚úÖ –í–∫–ª—é—á–µ–Ω–æ: %t\n", isEnabled))
		}
	}

	return info.String()
}

// formatImageSource —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–µ
func formatImageSource(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("üê≥ –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑–∞:\n\n")

	if marketplaceAgentId, ok := agent.Options["marketplaceAgentId"].(string); ok {
		info.WriteString(fmt.Sprintf("üè™ Marketplace Agent ID: %s\n", marketplaceAgentId))
	}

	return info.String()
}

// formatOptions —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø—Ü–∏–∏
func formatOptions(agent *api.Agent) string {
	var info strings.Builder

	info.WriteString("‚öôÔ∏è –í—Å–µ –æ–ø—Ü–∏–∏:\n\n")

	for key, value := range agent.Options {
		info.WriteString(fmt.Sprintf("üîß %s: %v\n", key, value))
	}

	return info.String()
}

// getDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—á–µ—Ä–∫
func getDescription(desc string) string {
	if desc == "" {
		return "‚Äî"
	}
	return desc
}

// FormatAgentStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
func FormatAgentStatus(status string) string {
	switch status {
	case "ACTIVE":
		return "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
	case "SUSPENDED":
		return "üü° –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	case "ERROR":
		return "üî¥ –û—à–∏–±–∫–∞"
	case "PENDING":
		return "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
	case "CREATING":
		return "üî® –°–æ–∑–¥–∞–µ—Ç—Å—è"
	case "DELETING":
		return "üóëÔ∏è –£–¥–∞–ª—è–µ—Ç—Å—è"
	default:
		return "‚ö™ " + status
	}
}

// FormatAgentType —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
func FormatAgentType(agentType string) string {
	switch agentType {
	case "marketplace":
		return "–ò–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"
	case "custom":
		return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
	case "":
		return "–ù–µ —É–∫–∞–∑–∞–Ω"
	default:
		return agentType
	}
}
