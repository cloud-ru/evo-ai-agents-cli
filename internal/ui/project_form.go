package ui

import (
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/charmbracelet/huh"
)

// ProjectFormData represents the data collected from the form
type ProjectFormData struct {
	ProjectName     string
	Author          string
	Framework       string // New field for agent framework selection
	CICDType        string
	DatabaseType    string // New field for database selection
	ExternalAPIKeys string // New field for external API keys selection
	GitInit         bool
	CreateEnv       bool
	InstallDeps     bool
}

// RunProjectForm runs the project creation form using huh
func RunProjectForm(projectType string, defaultProjectName ...string) (*ProjectFormData, error) {
	// Get default author from git config
	defaultAuthor := getGitAuthorFromConfig()
	if defaultAuthor == "" {
		defaultAuthor = "Cloud.ru Team"
	}

	// Form data with default values
	formData := ProjectFormData{
		Author:          defaultAuthor,
		CICDType:        "both",
		DatabaseType:    "none",
		ExternalAPIKeys: "none",
		GitInit:         true,
		CreateEnv:       true,
		InstallDeps:     false,
	}

	// Set default framework and project names
	if projectType == "agent" {
		formData.Framework = "adk"
		if len(defaultProjectName) > 0 && defaultProjectName[0] != "" {
			formData.ProjectName = defaultProjectName[0]
		} else {
			formData.ProjectName = "my-awesome-agent"
		}
	} else {
		if len(defaultProjectName) > 0 && defaultProjectName[0] != "" {
			formData.ProjectName = defaultProjectName[0]
		} else {
			formData.ProjectName = "my-awesome-mcp"
		}
	}

	// Create form fields based on project type
	var form *huh.Form

	if projectType == "agent" {
		// Agent project form with framework selection
		form = huh.NewForm(
			huh.NewGroup(
				// Project name
				huh.NewInput().
					Title("üöÄ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞").
					Description("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞").
					Placeholder("my-awesome-agent").
					Value(&formData.ProjectName).
					Validate(func(str string) error {
						// Accept non-empty strings or default values
						if str == "" {
							return fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
						}
						return nil
					}),


				// Author
				huh.NewInput().
					Title("üë§ –ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞").
					Description("–ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ git config)").
					Value(&formData.Author).
					Placeholder(defaultAuthor).
					Validate(func(str string) error {
						// Author is optional, accept empty or default values
						return nil
					}),

				// Framework selection
				huh.NewSelect[string]().
					Title("ü§ñ –§—Ä–µ–π–º–≤–æ—Ä–∫ –∞–≥–µ–Ω—Ç–∞").
					Description("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AI –∞–≥–µ–Ω—Ç–∞").
					Options(
						huh.NewOption("ADK (Agent Development Kit)", "adk"),
						huh.NewOption("LangGraph", "langgraph"),
						huh.NewOption("CrewAI", "crewai"),
					).
					Value(&formData.Framework),

				// CI/CD system
				huh.NewSelect[string]().
					Title("üîß CI/CD —Å–∏—Å—Ç–µ–º–∞").
					Description("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É CI/CD –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞").
					Options(
						huh.NewOption("GitLab CI", "gitlab"),
						huh.NewOption("GitHub Actions", "github"),
						huh.NewOption("–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞", "both"),
						huh.NewOption("–ë–µ–∑ CI/CD", "none"),
					).
					Value(&formData.CICDType),

				// Database selection
				huh.NewSelect[string]().
					Title("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö").
					Description("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞").
					Options(
						huh.NewOption("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "none"),
						huh.NewOption("PostgreSQL", "postgresql"),
						huh.NewOption("Redis", "redis"),
					).
					Value(&formData.DatabaseType),

				// External API Keys
				huh.NewSelect[string]().
					Title("üîë –í–Ω–µ—à–Ω–∏–µ API –∫–ª—é—á–∏").
					Description("–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏").
					Options(
						huh.NewOption("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "none"),
						huh.NewOption("OpenAI", "openai"),
						huh.NewOption("Anthropic", "anthropic"),
						huh.NewOption("–û–±–∞ (OpenAI + Anthropic)", "both"),
					).
					Value(&formData.ExternalAPIKeys),

				// Git initialization
				huh.NewConfirm().
					Title("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π").
					Description("–°–æ–∑–¥–∞—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç").
					Value(&formData.GitInit).
					Affirmative("–î–∞").
					Negative("–ù–µ—Ç"),

				// Create .env file
				huh.NewConfirm().
					Title("‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª").
					Description("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env.example –≤ .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏").
					Value(&formData.CreateEnv).
					Affirmative("–î–∞").
					Negative("–ù–µ—Ç"),

				// Install dependencies
				huh.NewConfirm().
					Title("üìö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏").
					Description("–ó–∞–ø—É—Å—Ç–∏—Ç—å uv sync –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π").
					Value(&formData.InstallDeps).
					Affirmative("–î–∞").
					Negative("–ù–µ—Ç"),
			),
		)
	} else {
		// MCP project form without framework selection
		form = huh.NewForm(
			huh.NewGroup(
				// Project name
				huh.NewInput().
					Title("üöÄ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞").
					Description("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞").
					Placeholder("my-awesome-mcp").
					Value(&formData.ProjectName).
					Validate(func(str string) error {
						if str == "" {
							return fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
						}
						return nil
					}),


				// Author
				huh.NewInput().
					Title("üë§ –ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞").
					Description("–ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ git config)").
					Value(&formData.Author).
					Placeholder(defaultAuthor).
					Validate(func(str string) error {
						// Author is optional, accept empty or default values
						return nil
					}),

				// CI/CD system
				huh.NewSelect[string]().
					Title("üîß CI/CD —Å–∏—Å—Ç–µ–º–∞").
					Description("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É CI/CD –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞").
					Options(
						huh.NewOption("GitLab CI", "gitlab"),
						huh.NewOption("GitHub Actions", "github"),
						huh.NewOption("–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞", "both"),
						huh.NewOption("–ë–µ–∑ CI/CD", "none"),
					).
					Value(&formData.CICDType),

				// Git initialization
				huh.NewConfirm().
					Title("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π").
					Description("–°–æ–∑–¥–∞—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç").
					Value(&formData.GitInit).
					Affirmative("–î–∞").
					Negative("–ù–µ—Ç"),

				// Create .env file
				huh.NewConfirm().
					Title("‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª").
					Description("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env.example –≤ .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏").
					Value(&formData.CreateEnv).
					Affirmative("–î–∞").
					Negative("–ù–µ—Ç"),

				// Install dependencies
				huh.NewConfirm().
					Title("üìö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏").
					Description("–ó–∞–ø—É—Å—Ç–∏—Ç—å uv sync –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π").
					Value(&formData.InstallDeps).
					Affirmative("–î–∞").
					Negative("–ù–µ—Ç"),
			),
		)
	}

	// Configure form with fullscreen mode
	form = form.
		WithTheme(huh.ThemeCharm()).
		WithAccessible(os.Getenv("ACCESSIBLE") != "").
		WithWidth(120).
		WithHeight(40)

	// Run the form
	if err := form.Run(); err != nil {
		return nil, fmt.Errorf("failed to run form: %w", err)
	}

	return &formData, nil
}

// getGitAuthorFromConfig retrieves author information from git config
func getGitAuthorFromConfig() string {
	// Get git user.name
	nameCmd := exec.Command("git", "config", "user.name")
	nameOutput, err := nameCmd.Output()
	if err != nil {
		return ""
	}

	name := strings.TrimSpace(string(nameOutput))
	if name == "" {
		return ""
	}

	// Get git user.email
	emailCmd := exec.Command("git", "config", "user.email")
	emailOutput, err := emailCmd.Output()
	if err != nil {
		return name
	}

	email := strings.TrimSpace(string(emailOutput))
	if email == "" {
		return name
	}

	return fmt.Sprintf("%s <%s>", name, email)
}
