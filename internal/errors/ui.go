package errors

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/lipgloss"
)

// UIStyles —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∏–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ UI
var UIStyles = struct {
	ErrorBox     lipgloss.Style
	ErrorTitle   lipgloss.Style
	ErrorMessage lipgloss.Style
	ErrorDetails lipgloss.Style
	ErrorCode    lipgloss.Style
	ErrorContext lipgloss.Style
	SuccessBox   lipgloss.Style
	WarningBox   lipgloss.Style
	InfoBox      lipgloss.Style
}{
	ErrorBox: lipgloss.NewStyle().
		Foreground(lipgloss.Color("1")).
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("1")).
		Padding(1, 2).
		Margin(1, 0),
	
	ErrorTitle: lipgloss.NewStyle().
		Foreground(lipgloss.Color("1")).
		Bold(true).
		Margin(0, 0, 1, 0),
	
	ErrorMessage: lipgloss.NewStyle().
		Foreground(lipgloss.Color("252")).
		Margin(0, 0, 1, 0),
	
	ErrorDetails: lipgloss.NewStyle().
		Foreground(lipgloss.Color("245")).
		Italic(true).
		Margin(0, 0, 1, 0),
	
	ErrorCode: lipgloss.NewStyle().
		Foreground(lipgloss.Color("8")).
		Background(lipgloss.Color("236")).
		Padding(0, 1).
		Margin(0, 0, 1, 0),
	
	ErrorContext: lipgloss.NewStyle().
		Foreground(lipgloss.Color("244")).
		Margin(0, 0, 0, 2),
	
	SuccessBox: lipgloss.NewStyle().
		Foreground(lipgloss.Color("2")).
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("2")).
		Padding(1, 2).
		Margin(1, 0),
	
	WarningBox: lipgloss.NewStyle().
		Foreground(lipgloss.Color("214")).
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("214")).
		Padding(1, 2).
		Margin(1, 0),
	
	InfoBox: lipgloss.NewStyle().
		Foreground(lipgloss.Color("39")).
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("39")).
		Padding(1, 2).
		Margin(1, 0),
}

// ErrorIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
func ErrorIcon(errorType ErrorType) string {
	switch errorType {
	case ErrorTypeValidation:
		return "‚ö†Ô∏è"
	case ErrorTypeConfiguration:
		return "‚öôÔ∏è"
	case ErrorTypeAuthentication:
		return "üîê"
	case ErrorTypeAPI:
		return "üåê"
	case ErrorTypeNetwork:
		return "üì°"
	case ErrorTypeFileSystem:
		return "üìÅ"
	case ErrorTypeTemplate:
		return "üìÑ"
	case ErrorTypeUser:
		return "üë§"
	case ErrorTypeSystem:
		return "üí•"
	default:
		return "‚ùå"
	}
}

// SeverityIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
func SeverityIcon(severity Severity) string {
	switch severity {
	case SeverityLow:
		return "‚ÑπÔ∏è"
	case SeverityMedium:
		return "‚ö†Ô∏è"
	case SeverityHigh:
		return "üö®"
	case SeverityCritical:
		return "üí•"
	default:
		return "‚ùå"
	}
}

// FormatError —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
func FormatError(err error) string {
	if err == nil {
		return ""
	}

	// –ï—Å–ª–∏ —ç—Ç–æ AppError, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	if appErr, ok := err.(*AppError); ok {
		return formatAppError(appErr)
	}

	// –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	return formatGenericError(err)
}

// formatAppError —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
func formatAppError(err *AppError) string {
	var parts []string

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏
	title := fmt.Sprintf("%s %s %s", 
		ErrorIcon(err.Type), 
		SeverityIcon(err.Severity), 
		err.Message)
	parts = append(parts, UIStyles.ErrorTitle.Render(title))

	// –ö–æ–¥ –æ—à–∏–±–∫–∏
	if err.Code != "" {
		parts = append(parts, UIStyles.ErrorCode.Render(err.Code))
	}

	// –î–µ—Ç–∞–ª–∏
	if err.Details != "" {
		parts = append(parts, UIStyles.ErrorDetails.Render(err.Details))
	}

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç
	if len(err.Context) > 0 {
		contextParts := []string{"–ö–æ–Ω—Ç–µ–∫—Å—Ç:"}
		for key, value := range err.Context {
			contextParts = append(contextParts, fmt.Sprintf("  %s: %v", key, value))
		}
		parts = append(parts, UIStyles.ErrorContext.Render(strings.Join(contextParts, "\n")))
	}

	// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
	if err.Original != nil {
		parts = append(parts, UIStyles.ErrorDetails.Render(fmt.Sprintf("–ü—Ä–∏—á–∏–Ω–∞: %v", err.Original)))
	}

	content := strings.Join(parts, "\n")
	return UIStyles.ErrorBox.Render(content)
}

// formatGenericError —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—É—é –æ—à–∏–±–∫—É
func formatGenericError(err error) string {
	title := UIStyles.ErrorTitle.Render("‚ùå –û—à–∏–±–∫–∞")
	message := UIStyles.ErrorMessage.Render(err.Error())
	
	content := fmt.Sprintf("%s\n\n%s", title, message)
	return UIStyles.ErrorBox.Render(content)
}

// FormatSuccess —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
func FormatSuccess(message string) string {
	title := UIStyles.ErrorTitle.Render("‚úÖ –£—Å–ø–µ—Ö")
	msg := UIStyles.ErrorMessage.Render(message)
	
	content := fmt.Sprintf("%s\n\n%s", title, msg)
	return UIStyles.SuccessBox.Render(content)
}

// FormatWarning —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
func FormatWarning(message string) string {
	title := UIStyles.ErrorTitle.Render("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
	msg := UIStyles.ErrorMessage.Render(message)
	
	content := fmt.Sprintf("%s\n\n%s", title, msg)
	return UIStyles.WarningBox.Render(content)
}

// FormatInfo —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func FormatInfo(message string) string {
	title := UIStyles.ErrorTitle.Render("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
	msg := UIStyles.ErrorMessage.Render(message)
	
	content := fmt.Sprintf("%s\n\n%s", title, msg)
	return UIStyles.InfoBox.Render(content)
}

// GetErrorSuggestions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–∫–∏
func GetErrorSuggestions(err error) []string {
	if appErr, ok := err.(*AppError); ok {
		return getSuggestionsForType(appErr.Type, appErr.Code)
	}
	return []string{"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"}
}

// getSuggestionsForType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
func getSuggestionsForType(errorType ErrorType, code string) []string {
	switch errorType {
	case ErrorTypeValidation:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
		}
	case ErrorTypeConfiguration:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º",
		}
	case ErrorTypeAuthentication:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫",
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
		}
	case ErrorTypeAPI:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω",
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ",
		}
	case ErrorTypeNetwork:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
		}
	case ErrorTypeFileSystem:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Å–∫ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω",
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º",
		}
	case ErrorTypeTemplate:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —à–∞–±–ª–æ–Ω–∞",
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã",
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º —à–∞–±–ª–æ–Ω–æ–≤",
		}
	case ErrorTypeUser:
		return []string{
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
			"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥",
		}
	case ErrorTypeSystem:
		return []string{
			"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
			"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
		}
	default:
		return []string{"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"}
	}
}
